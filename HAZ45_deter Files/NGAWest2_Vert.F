C  ***** PEER NGA-West 2 MODELS Vertical (2013) **********



c ---------------------------------------------------------------------------            
C     *** Boore, Stewart, Seyhan and Atkinson NGA West 2 (NGA West2-2013) ***
C         Earthquake Spectra Report:
C            "NGA-West2 Equations for Predicting PGA, PGV, and 5%-Damped
C                PSA for Shallow Crustal Earthquakes."
C             D. M. Boore, J. P. Stewart, E. Seyhan, and G. M. Atkinson
C     Notes:
C        Applicable Range:
C            3.0 < M < 8.5 (Strike-Slip)
C            3.0 < M < 7.0 (Normal)
C            Distance < 300km
C            150 < Vs < 1500 m/s
C            0.0 < Z1 < 3.0 km
C            Region Flag:
C               0 = Global 
C               1 = China-Turkey
C               2 = Italy-Japan
c ---------------------------------------------------------------------------            

      subroutine SSBA_NGAWest2_2013_Vert ( mag, Rbjf, specT, 
     1        period2, lnY, sigma, iflag, vs, ftype, pga4nl, z10, regionflag, basinflag, phi, tau ) 

C     Last Updated: 06/15/14

      parameter (MAXPER=107)
      REAL Period(MAXPER), c1(MAXPER), c2(MAXPER), c3(MAXPER)
      real h(MAXPER), DC3ChinaTrk(MAXPER), DC3ItalyJapan(MAXPER), e0(MAXPER)
      real e1(MAXPER), e2(MAXPER), e3(MAXPER), e4(MAXPER)
      real e5(MAXPER), e6(MAXPER), mh(MAXPER), Vc(MAXPER)
      real f4(MAXPER)
      real l1(MAXPER), l2(MAXPER), t1(MAXPER), t2(MAXPER)
      real f5(MAXPER), Dfr(MAXPER), Dfv(MAXPER)
      real R1(MAXPER), R2(MAXPER), DC3Global(MAXPER), f6(MAXPER), f7(MAXPER)
      real ck(MAXPER), cv(MAXPER), phi1(MAXPER), phi2(MAXPER), tau1(MAXPER), tau2(MAXPER)

      real Mref, Rref, Vref, f1, f3, DC3Glb, specT
      REAL MAG, RBJF, VS, z10
      real ftype, Rp, R
      INTEGER iFlag, count1, count2, regionflag, basinflag
      real sigmaT, lnY, mechS, mechN, mechR, pga4nl
      real f2, flin, fBasin
      real c1T, c2T, c3T, hT, Dc3ctkT, Dc3JpnT, e0T, e1T, e2T, e3T, e4T
      real e5T, e6T, mhT, VcT, f4T, l1T, l2T, t1T, t2T
      real deltaz1, f5T, DfrT, DfvT, R1T, R2T, DC3GlobalT
      real DC3ChinaTrkT, DC3ItalyJapanT, f6T, f7T
      real ckT, cvT, phi1T, phiT2, tau1T, tauT2, Phi, Tau

      Data period  /  0, -1, 0.01, 0.02, 0.022, 0.025, 0.029, 0.03, 0.032, 0.035, 0.036, 0.04, 0.042, 0.044, 0.045, 
     1                0.046, 0.048, 0.05, 0.055, 0.06, 0.065, 0.067, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.11, 
     1                0.12, 0.13, 0.133, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.22, 0.24, 0.25, 0.26, 0.28, 0.29, 0.3,
     1                0.32, 0.34, 0.35, 0.36, 0.38, 0.4, 0.42, 0.44, 0.45, 0.46, 0.48, 0.5, 0.55, 0.6, 0.65, 0.667, 0.7, 0.75, 
     1                0.8, 0.85, 0.9, 0.95, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.2, 2.4, 2.5, 2.6, 2.8, 3, 3.2, 
     1                3.4, 3.5, 3.6, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10 / 
      Data e0  /  0.04476, 4.265, 0.06567, 0.25903, 0.31211, 0.40138, 0.5192, 0.54438, 0.58973, 0.6481, 0.66522, 
     1       0.71907, 0.73882, 0.75434, 0.7601, 0.76559, 0.77548, 0.78372, 0.79541, 0.79243, 0.78232, 0.77875, 
     1       0.77393, 0.76651, 0.76013, 0.75592, 0.75392, 0.75387, 0.7553, 0.757, 0.74562, 0.72538, 0.71746, 
     1       0.69399, 0.65168, 0.60365, 0.55146, 0.49788, 0.44512, 0.39653, 0.309, 0.23089, 0.1965, 0.16413, 
     1       0.10626, 0.080031, 0.054928, 0.01005, -0.034363, -0.056362, -0.077509, -0.11773, -0.15456, -0.18915,
     1      -0.22266, -0.23949, -0.25605, -0.28845, -0.3178, -0.38726, -0.4442, -0.49042, -0.50465, -0.52999, -0.56241,
     1      -0.58802, -0.61076, -0.63042, -0.6473, -0.6627, -0.69045, -0.71778, -0.7497, -0.78499, -0.82242, -0.86001,
     1      -0.89699, -0.93391, -0.97017, -1.0079, -1.0862, -1.1705, -1.214, -1.2617, -1.3641, -1.4732, -1.5876, 
     1      -1.6929, -1.7439, -1.7947, -1.8961, -1.999, -2.1021, -2.203, -2.3044, -2.4083, -2.512, -2.7756, -3.0569,
     1      -3.3336, -3.6013, -3.8568, -4.0927, -4.3233, -4.5362, -4.7249, -4.885  / 
      Data e1  /  0.09511, 4.29, 0.1167, 0.31235, 0.36648, 0.45808, 0.57911, 0.60495, 0.65157, 0.71146, 0.72908, 0.78463,
     1       0.80498, 0.82096, 0.82706, 0.83291, 0.84363, 0.85258, 0.86572, 0.86389, 0.85422, 0.85053, 0.84532, 0.83701, 
     1       0.8293, 0.82413, 0.82132, 0.82036, 0.8209, 0.82021, 0.80618, 0.78262, 0.77354, 0.74694, 0.69991, 0.64755, 
     1       0.59083, 0.5329, 0.47632, 0.42416, 0.33047, 0.24746, 0.21076, 0.17625, 0.11543, 0.088128, 0.062267, 0.016319,
     1      -0.028448, -0.050413, -0.071444, -0.11114, -0.1473, -0.18126, -0.21429, -0.23093, -0.24734, -0.27967, 
     1      -0.30919, -0.37917, -0.43657, -0.48335, -0.49772, -0.52336, -0.55646, -0.58278, -0.60605, -0.62621, 
     1      -0.64364, -0.6593, -0.68737, -0.71517, -0.74707, -0.78246, -0.81982, -0.85807, -0.89622, -0.93407, 
     1      -0.97075, -1.009, -1.0937, -1.1856, -1.2334, -1.2847, -1.3931, -1.5059, -1.6256, -1.7356, -1.7879, 
     1      -1.8387, -1.9381, -2.0389, -2.1408, -2.2403, -2.3437, -2.4496, -2.5577, -2.8307, -3.1232, -3.4158, 
     1      -3.6951, -3.9588, -4.2005, -4.4362, -4.6481, -4.8359, -5.004  / 
      Data e2  /  -0.1165, 4.177, -0.09703, 0.10173, 0.15466, 0.24356, 0.36515, 0.39187, 0.4408, 0.50449, 0.5237,
     1       0.58261, 0.60255, 0.61686, 0.62154, 0.62583, 0.63265, 0.63771, 0.63948, 0.62185, 0.59597, 0.58655,
     1       0.57333, 0.55379, 0.53925, 0.52744, 0.51876, 0.51425, 0.5129, 0.51196, 0.50333, 0.49069, 0.48532, 
     1       0.46859, 0.43605, 0.39858, 0.35884, 0.31842, 0.27853, 0.24146, 0.16882, 0.099728, 0.068526, 0.038098, 
     1      -0.019122, -0.045933, -0.072044, -0.11978, -0.16669, -0.1899, -0.21217, -0.25481, -0.29378, -0.3294,
     1      -0.36226, -0.37797, -0.3933, -0.42263, -0.44878, -0.51113, -0.56456, -0.60572, -0.61844, -0.64186, 
     1      -0.67286, -0.69823, -0.72125, -0.74098, -0.75726, -0.7722, -0.80158, -0.82918, -0.85983, -0.89092,
     1      -0.92206, -0.95181, -0.97542, -0.99679, -1.0179, -1.0411, -1.0825, -1.1253, -1.1519, -1.1834, -1.2566, 
     1      -1.3397, -1.4314, -1.5133, -1.5565, -1.6029, -1.7011, -1.8061, -1.9099, -2.0096, -2.1085, -2.206, 
     1      -2.3062, -2.5636, -2.8402, -3.1132, -3.3881, -3.6571, -3.9174, -4.1727, -4.4271, -4.6394, -4.81  / 
      Data e3  /  0.0119, 4.252, 0.03213, 0.21889, 0.27016, 0.35498, 0.46498, 0.48817, 0.52971, 0.58295, 0.59842,
     1       0.64704, 0.6656, 0.68047, 0.68603, 0.69135, 0.70096, 0.70903, 0.72173, 0.72241, 0.71784, 0.71683, 
     1       0.71607, 0.71517, 0.71465, 0.71547, 0.7176, 0.72095, 0.7256, 0.73275, 0.72533, 0.70864, 0.7019, 
     1       0.68182, 0.64474, 0.60113, 0.55246, 0.50183, 0.45149, 0.40516, 0.32359, 0.25153, 0.22015, 0.1909,
     1       0.1387, 0.11481, 0.091557, 0.049857, 0.0071581, -0.014399, -0.035356, -0.075708, -0.11285, -0.14842,
     1      -0.1831, -0.20062, -0.21787, -0.25172, -0.28204, -0.35337, -0.41087, -0.45797, -0.47254, -0.49811, 
     1      -0.52978, -0.55406, -0.57564, -0.59435, -0.61037, -0.6252, -0.65192, -0.6782, -0.71078, -0.74741, 
     1      -0.78747, -0.82694, -0.86721, -0.90844, -0.94998, -0.99029, -1.0733, -1.1575, -1.2001, -1.2477, 
     1      -1.3514, -1.4621, -1.5766, -1.6819, -1.7333, -1.7853, -1.891, -1.9993, -2.1054, -2.2078, -2.3079,
     1      -2.4079, -2.5063, -2.7534, -3.0131, -3.2643, -3.5068, -3.7405, -3.9544, -4.1666, -4.3654, 
     1      -4.5438, -4.683  / 
      Data e4  /  1.249, 0.9909, 1.244, 1.2459, 1.2428, 1.2353, 1.2226, 1.2204, 1.2165, 1.214, 1.214, 
     1       1.2153, 1.2186, 1.2229, 1.2253, 1.2278, 1.2334, 1.2396, 1.2582, 1.2771, 1.2984, 1.3073, 
     1       1.3213, 1.346, 1.3683, 1.3871, 1.4025, 1.4157, 1.426, 1.4421, 1.4382, 1.4175, 1.4095, 1.388, 
     1       1.3495, 1.3056, 1.2561, 1.2034, 1.1499, 1.1019, 1.0183, 0.94836, 0.91946, 0.89431, 0.85599, 
     1       0.84183, 0.83093, 0.81614, 0.8071, 0.80421, 0.80244, 0.80249, 0.80774, 0.81778, 0.82957, 0.83543,
     1       0.84129, 0.85347, 0.86739, 0.9058, 0.9502, 0.9979, 1.0138, 1.0436, 1.0893, 1.1363, 1.1815, 1.2263,
     1       1.2724, 1.318, 1.4102, 1.4962, 1.573, 1.6389, 1.6958, 1.7488, 1.7989, 1.8453, 1.8906, 1.9321, 2.0151,
     1       2.0954, 2.13, 2.1602, 2.2169, 2.2682, 2.3032, 2.3331, 2.3467, 2.3607, 2.3848, 2.4125, 2.4381, 2.4618,
     1       2.4761, 2.4833, 2.4877, 2.4959, 2.4793, 2.4354, 2.3735, 2.3114, 2.2644, 2.203, 2.1408, 2.1146, 2.07  / 
      Data e5  /  0, -0.1116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
     1      -0.000075691, -0.0036371, -0.011656, -0.014478, -0.022127, -0.035269, -0.050233, -0.066956, -0.084708,
     1      -0.10198, -0.1176, -0.14562, -0.16993, -0.18056, -0.19004, -0.20527, -0.21152, -0.21719, -0.2266, 
     1      -0.23436, -0.23772, -0.24078, -0.24576, -0.24943, -0.25166, -0.25329, -0.25412, -0.25488, -0.25603, 
     1      -0.25647, -0.25658, -0.25369, -0.24847, -0.2466, -0.24298, -0.23714, -0.2311, -0.22499, -0.21863, 
     1      -0.21214, -0.2057, -0.19287, -0.18135, -0.17184, -0.1645, -0.15886, -0.15251, -0.14609, -0.13973, 
     1      -0.13297, -0.12718, -0.11288, -0.09595, -0.088415, -0.08191, -0.068868, -0.056817, -0.048698, -0.039871,
     1      -0.035928, -0.032374, -0.026018, -0.020679, -0.015478, -0.01108, -0.0083925, -0.0070789, -0.0058636, 
     1      -0.0012749, -0.0052635, -0.012827, -0.021516, -0.03077, -0.040897, -0.053482, -0.063887, 
     1      -0.070854, -0.07875  / 
      Data e6  /  0.03272, 0.2463, 0.0324, 0.02145, 0.019752, 0.018132, 0.018232, 0.019167, 0.022452, 0.029375, 
     1       0.032097, 0.04363, 0.050937, 0.058681, 0.06298, 0.067411, 0.077106, 0.08691, 0.10999, 0.12946, 
     1       0.14857, 0.15538, 0.16444, 0.1762, 0.18222, 0.18056, 0.17411, 0.16441, 0.1517, 0.11768, 0.080675,
     1       0.042309, 0.031592, 0.0099898, -0.014432, -0.03244, -0.045314, -0.054171, -0.060246, -0.064628, 
     1      -0.068746, -0.068681, -0.067892, -0.067703, -0.068085, -0.067578, -0.066275, -0.06605, -0.065779,
     1      -0.065628, -0.065199, -0.064101, -0.061931, -0.059254, -0.05547, -0.053465, -0.051671, -0.049035, 
     1      -0.04697, -0.035347, -0.022249, -0.012055, -0.0079684, 0.00054711, 0.013705, 0.029971, 0.048967, 
     1       0.06943, 0.091908, 0.1163, 0.1646, 0.21026, 0.26434, 0.31632, 0.36507, 0.40905, 0.45149, 0.49355,
     1       0.53433, 0.57338, 0.64103, 0.70457, 0.73533, 0.7657, 0.82559, 0.8844, 0.93856, 0.98202, 1.0014, 
     1       1.0203, 1.0547, 1.0878, 1.1162, 1.142, 1.1636, 1.1808, 1.1923, 1.2051, 1.2099, 1.2028, 1.1932, 
     1       1.1827, 1.1753, 1.1674, 1.1754, 1.1877, 1.221  / 
      Data mh  /  5.5, 6.2, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 
     1       5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.51, 5.52, 5.53, 5.54, 5.57, 5.62, 5.66, 5.67, 5.7, 5.74, 
     1       5.78, 5.82, 5.85, 5.89, 5.92, 5.97, 6.03, 6.05, 6.07, 6.11, 6.12, 6.14, 6.16, 6.18, 6.18, 6.19,
     1       6.19, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2,
     1       6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 
     1       6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2, 6.2  / 
      Data c1  /  -1.159, -1.253, -1.161, -1.1982, -1.2075, -1.2196, -1.2312, -1.2327, -1.2337, -1.2314, 
     1      -1.2296, -1.2203, -1.2129, -1.2056, -1.2017, -1.1978, -1.1894, -1.1815, -1.1598, -1.138, -1.1173,
     1      -1.1094, -1.0982, -1.0817, -1.0675, -1.0552, -1.046, -1.0378, -1.031, -1.0187, -1.0092, -1.0015, 
     1      -0.99917, -0.99423, -0.98728, -0.98108, -0.97597, -0.97183, -0.96857, -0.9663, -0.96216, -0.95868,
     1      -0.95726, -0.95635, -0.95549, -0.95526, -0.95504, -0.95543, -0.9562, -0.95681, -0.95772, -0.96008, 
     1      -0.96309, -0.96607, -0.969, -0.97042, -0.97186, -0.97493, -0.97821, -0.98639, -0.99591, -1.0059, 
     1      -1.0094, -1.017, -1.029, -1.0404, -1.0518, -1.0624, -1.0721, -1.081, -1.0965, -1.1088, -1.1192, 
     1      -1.1288, -1.1378, -1.1462, -1.1541, -1.1616, -1.1677, -1.1722, -1.1772, -1.179, -1.179, -1.1783,
     1      -1.1742, -1.1667, -1.1592, -1.1553, -1.153, -1.1499, -1.1431, -1.1329, -1.1212, -1.1103, -1.1008,
     1      -1.0924, -1.0845, -1.0648, -1.043, -1.0298, -1.024, -1.0187, -1.0155, -1.0116, -1.0128,
     1      -1.0122, -1.012  / 
      Data c2  /  0.1542, 0.1717, 0.1538, 0.15611, 0.15651, 0.15698, 0.15729, 0.15721, 0.15667, 0.15528,
     1       0.1546, 0.15181, 0.14986, 0.14767, 0.14645, 0.14521, 0.1426, 0.13976, 0.13264, 0.12621, 0.12001, 
     1       0.11761, 0.11421, 0.10919, 0.10528, 0.10284, 0.10139, 0.10039, 0.09975, 0.099667, 0.10126, 0.10405,
     1       0.10493, 0.10682, 0.10945, 0.11187, 0.11419, 0.11637, 0.11858, 0.12058, 0.12332, 0.12521, 0.12583,
     1       0.12635, 0.12745, 0.12794, 0.12816, 0.12863, 0.12946, 0.12996, 0.13045, 0.13129, 0.13196, 0.13258,
     1       0.13312, 0.13346, 0.13382, 0.13465, 0.13536, 0.136, 0.136, 0.1362, 0.13618, 0.13605, 0.13552, 
     1       0.13446, 0.13323, 0.1317, 0.12979, 0.1274, 0.12158, 0.11515, 0.10804, 0.10147, 0.095607, 0.090409,
     1       0.08584, 0.081674, 0.07772, 0.073742, 0.067351, 0.062165, 0.060091, 0.058525, 0.055521, 0.052496,
     1       0.050632, 0.050581, 0.050687, 0.050559, 0.050075, 0.048753, 0.047662, 0.046831, 0.046893, 0.047998,
     1       0.050117, 0.057959, 0.067361, 0.080847, 0.096704, 0.11166, 0.12478, 0.13792, 0.15041, 
     1       0.1581, 0.1605  / 
      Data c3  /  -0.009224, -0.0034, -0.009224, -0.009038, -0.009036, -0.009072, -0.009207, -0.009259, -0.009387,
     1      -0.009628, -0.009719, -0.01012, -0.01034, -0.01055, -0.01066, -0.01077, -0.01097, -0.01116, -0.01157, 
     1      -0.01187, -0.01207, -0.01213, -0.01218, -0.01222, -0.01218, -0.01208, -0.012, -0.01191, -0.01182, 
     1      -0.01159, -0.01138, -0.01115, -0.01107, -0.01092, -0.01077, -0.01051, -0.01027, -0.01003, -0.009809,
     1      -0.009599, -0.009208, -0.008851, -0.008684, -0.008523, -0.008219, -0.008075, -0.007936, -0.007672,
     1      -0.007423, -0.007304, -0.007189, -0.006967, -0.006757, -0.006557, -0.006366, -0.006274, -0.006184,
     1      -0.006009, -0.005842, -0.005451, -0.005094, -0.004766, -0.00466, -0.004462, -0.004179, -0.003915,
     1      -0.003666, -0.003432, -0.00321, -0.003, -0.0027, -0.00245, -0.0022, -0.002, -0.0018, -0.00165, 
     1      -0.0015, -0.0014, -0.0013, -0.0012, -0.001086, -0.000992, -0.000946, -0.0009, -0.000809, -0.000704, 
     1      -0.0006385, -0.0005769, -0.0005474, -0.0005188, -0.0004639, -0.0004118, -0.0003623, -0.000315, 
     1      -0.0002699, -0.0002266, -0.0001852, -0.00008837, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data h  /  4.9, 6.9, 4.9, 4.9, 4.9, 4.9, 4.9, 4.9, 4.9, 4.896, 4.885, 4.843, 4.824, 4.807, 4.803, 4.8, 
     1       4.8, 4.8, 4.8, 4.795, 4.815, 4.817, 4.817, 4.81, 4.787, 4.763, 4.74, 4.727, 4.723, 4.7, 4.703, 
     1       4.731, 4.738, 4.747, 4.746, 4.725, 4.702, 4.685, 4.683, 4.679, 4.646, 4.637, 4.651, 4.68, 4.745,
     1       4.786, 4.819, 4.872, 4.928, 4.961, 4.995, 5.058, 5.096, 5.118, 5.138, 5.152, 5.164, 5.182, 5.209,
     1       5.283, 5.371, 5.485, 5.535, 5.643, 5.819, 6.017, 6.222, 6.431, 6.626, 6.812, 7.215, 7.619, 8.002,
     1       8.336, 8.63, 8.899, 9.091, 9.244, 9.393, 9.487, 9.533, 9.486, 9.465, 9.437, 9.428, 9.467, 9.486,
     1       9.474, 9.47, 9.478, 9.489, 9.507, 9.521, 9.537, 9.541, 9.534, 9.502, 9.359, 9.095, 8.692, 8.286,
     1       7.81, 7.371, 6.796, 6.427, 6.128, 5.8  / 
      Data cv  /  -0.4711, -0.5172, -0.471, -0.4639, -0.4599, -0.4518, -0.4435, -0.4419, -0.4398, -0.436, -0.4353,
     1      -0.4375, -0.4398, -0.4446, -0.4468, -0.4488, -0.452, -0.4569, -0.4688, -0.4836, -0.4925, -0.4959, 
     1      -0.499, -0.5013, -0.5068, -0.5084, -0.5058, -0.5063, -0.5078, -0.5131, -0.5123, -0.5115, -0.5126,
     1      -0.5177, -0.5244, -0.5292, -0.5331, -0.5358, -0.5376, -0.538, -0.538, -0.5379, -0.5363, -0.5347, 
     1      -0.5327, -0.5294, -0.526, -0.5208, -0.5139, -0.5085, -0.5037, -0.4968, -0.4902, -0.4855, -0.4832,
     1      -0.4844, -0.4872, -0.4886, -0.491, -0.496, -0.5078, -0.5193, -0.5282, -0.5344, -0.5372, -0.5417, 
     1      -0.5493, -0.5595, -0.5712, -0.5832, -0.5982, -0.614, -0.6286, -0.6431, -0.6557, -0.6667, -0.6759,
     1      -0.6828, -0.6874, -0.6902, -0.6799, -0.6723, -0.6715, -0.6703, -0.661, -0.6518, -0.6419, -0.6305,
     1      -0.6249, -0.6194, -0.6093, -0.5996, -0.5899, -0.5785, -0.5633, -0.5435, -0.5221, -0.4759, -0.4369,
     1      -0.3999, -0.366, -0.3378, -0.3174, -0.3031, -0.2925, -0.2842, -0.2767  / 
      Data vc  /  1500, 1300, 1500.2, 1500.36, 1500.68, 1501.04, 1501.26, 1502.95, 1503.12, 1503.24, 1503.32,
     1       1503.35, 1503.34, 1503.13, 1502.84, 1502.47, 1502.01, 1501.42, 1500.71, 1499.83, 1498.74, 1497.42, 
     1       1495.85, 1494, 1491.82, 1489.29, 1486.36, 1482.98, 1479.12, 1474.74, 1469.75, 1464.09, 1457.76, 
     1       1450.71, 1442.85, 1434.22, 1424.85, 1414.77, 1403.99, 1392.61, 1380.72, 1368.51, 1356.21, 1343.89, 
     1       1331.67, 1319.83, 1308.47, 1297.65, 1287.5, 1278.06, 1269.19, 1260.74, 1252.66, 1244.8, 1237.03, 
     1       1229.23, 1221.16, 1212.74, 1203.91, 1194.59, 1184.93, 1175.19, 1165.69, 1156.46, 1147.59, 1139.21,
     1       1131.34, 1123.91, 1116.83, 1109.95, 1103.07, 1096.04, 1088.67, 1080.77, 1072.39, 1061.77, 1049.29,
     1       1036.42, 1023.14, 1009.49, 995.52, 981.33, 966.94, 952.34, 937.52, 922.43, 908.7902245, 896.1527649,
     1       883.1598664, 870.0472783, 857.0733474, 844.4757455, 832.454304, 821.1814444, 810.7946349, 801.4123822,
     1       793.1312281, 785.7331967, 779.9122405, 775.6002501, 772.6812408, 771.0093237, 760.810005, 764.5003506, 
     1       768.0682561, 771.5545347, 775  / 
      Data f4  /  -0.05, -0.03, -0.05, -0.05, -0.0501, -0.0503, -0.0502, -0.05, -0.0495, -0.0487, -0.0486, -0.05, 
     1      -0.0521, -0.055, -0.0566, -0.0583, -0.0618, -0.065, -0.0709, -0.074, -0.0753, -0.0754, -0.0753, -0.075,
     1      -0.0749, -0.075, -0.0752, -0.0752, -0.075, -0.0734, -0.0706, -0.0671, -0.066, -0.0634, -0.06, -0.0573, 
     1      -0.0551, -0.0534, -0.0517, -0.05, -0.0459, -0.0417, -0.04, -0.0387, -0.0371, -0.0365, -0.036, -0.0348,
     1      -0.0335, -0.033, -0.0325, -0.0319, -0.032, -0.033, -0.0347, -0.0356, -0.0366, -0.0385, -0.04, -0.0409,
     1      -0.0386, -0.0343, -0.0326, -0.0293, -0.025, -0.0224, -0.0212, -0.0211, -0.0215, -0.022, -0.0221, -0.021,
     1      -0.0192, -0.017, -0.015, -0.0134, -0.0122, -0.0113, -0.0106, -0.01, -0.009, -0.008, -0.0075, -0.007,
     1      -0.0061, -0.005, -0.004534453, -0.004097139, -0.003888038, -0.003684828, -0.003294815, -0.002924813,
     1      -0.002572866, -0.002237295, -0.001916643, -0.00160964, -0.001315172, -0.000627654, 0, 0, 0, 0, 0,
     1       0, 0, 0, 0  / 
      Data f5  /  -0.00701, -0.00844, -0.00701, -0.00728, -0.00732, -0.00736, -0.00737, -0.00735, -0.00731,  
     1      -0.00721, -0.00717, -0.00698, -0.00687, -0.00677, -0.00672, -0.00667, -0.00656, -0.00647, -0.00625,
     1      -0.00607, -0.00593, -0.00588, -0.00582, -0.00573, -0.00567, -0.00563, -0.00561, -0.0056, -0.0056, 
     1      -0.00562, -0.00567, -0.00572, -0.00574, -0.00578, -0.00585, -0.00591, -0.00597, -0.00602, -0.00608,
     1      -0.00614, -0.00626, -0.00638, -0.00644, -0.0065, -0.0066, -0.00665, -0.0067, -0.0068, -0.00689, 
     1      -0.00693, -0.00697, -0.00705, -0.00713, -0.00719, -0.00726, -0.00729, -0.00732, -0.00738, -0.00744, 
     1      -0.00758, -0.00773, -0.00787, -0.00792, -0.008, -0.00812, -0.00822, -0.0083, -0.00836, -0.00841, 
     1      -0.00844, -0.00847, -0.00842, -0.00829, -0.00806, -0.00771, -0.00723, -0.00666, -0.00603, -0.0054, 
     1      -0.00479, -0.00378, -0.00302, -0.00272, -0.00246, -0.00208, -0.00183, -0.00167, -0.00158, -0.00155,
     1      -0.00154, -0.00152, -0.00152, -0.00152, -0.0015, -0.00148, -0.00146, -0.00144, -0.0014, -0.00138,
     1      -0.00137, -0.00137, -0.00137, -0.00137, -0.00137, -0.00137, -0.00136, -0.00136  / 
      Data tau1  /  0.451521043, 0.291079428, 0.45385, 0.464625, 0.474453, 0.487963, 0.504131, 0.507899, 0.515906,
     1       0.527233, 0.530845, 0.544574, 0.548576, 0.552419, 0.554286, 0.556117, 0.55968, 0.563119, 0.561191, 
     1       0.559436, 0.557826, 0.557218, 0.55634, 0.55496, 0.542804, 0.531627, 0.5213, 0.511716, 0.502787, 
     1       0.481918, 0.463624, 0.447408, 0.442891, 0.432901, 0.419819, 0.409723, 0.400461, 0.39192, 0.384009,
     1       0.376652, 0.363353, 0.351622, 0.34625, 0.341165, 0.331762, 0.3274, 0.32324, 0.327055, 0.33068, 
     1       0.332428, 0.334135, 0.337436, 0.340597, 0.343632, 0.346551, 0.34797, 0.349363, 0.352077, 0.3547,
     1       0.3609, 0.366655, 0.37203, 0.373781, 0.377077, 0.381837, 0.386344, 0.390626, 0.394706, 0.398606, 
     1       0.40234, 0.409119, 0.415406, 0.421276, 0.426784, 0.431977, 0.436891, 0.441559, 0.446005, 0.450252,
     1       0.454319, 0.461972, 0.469072, 0.472441, 0.4757, 0.48192, 0.487783, 0.481138, 0.474978, 0.472061, 
     1       0.469243, 0.463882, 0.458852, 0.454118, 0.44965, 0.445422, 0.441411, 0.437598, 0.432362, 0.427637,
     1       0.423336, 0.419392, 0.415754, 0.412379, 0.409233, 0.40629, 0.403525, 0.40092  / 
      Data Tau2  /  0.379837238, 0.296320995, 0.389257, 0.399868, 0.407458, 0.417865, 0.430281, 0.433169, 
     1       0.441273, 0.452779, 0.456457, 0.470482, 0.476495, 0.4823, 0.48513, 0.487913, 0.493349, 0.498619,
     1       0.498705, 0.498783, 0.498855, 0.498883, 0.498922, 0.498984, 0.490374, 0.482422, 0.475043, 0.468167, 
     1       0.461735, 0.464859, 0.46773, 0.470387, 0.471147, 0.47286, 0.475174, 0.460312, 0.446775, 0.434377,
     1       0.422967, 0.412419, 0.393513, 0.37701, 0.369509, 0.362442, 0.349455, 0.34347, 0.337784, 0.3383,
     1       0.338786, 0.339018, 0.339244, 0.339678, 0.34009, 0.340483, 0.340858, 0.341039, 0.341216, 0.34156,
     1       0.34189, 0.342661, 0.343367, 0.344018, 0.344228, 0.344621, 0.345184, 0.345711, 0.346207, 0.346675,
     1       0.347119, 0.34754, 0.353833, 0.359677, 0.365139, 0.370269, 0.375111, 0.379696, 0.384055, 0.388211,
     1       0.392183, 0.395988, 0.403158, 0.409817, 0.412979, 0.41604, 0.421886, 0.427402, 0.419259, 0.411751,
     1       0.408208, 0.404795, 0.398324, 0.39228, 0.386617, 0.381293, 0.376274, 0.371531, 0.367038, 0.383498,
     1       0.39917, 0.414151, 0.428523, 0.44235, 0.455688, 0.468583, 0.481075, 0.493198, 0.504982  / 
      Data Phi1  /  0.708903738, 0.589847958, 0.710676, 0.715365, 0.720912, 0.728419, 0.737233, 0.739261, 
     1       0.745383, 0.753967, 0.756686, 0.766942, 0.77119, 0.775263, 0.777238, 0.779174, 0.782938, 0.786564,
     1       0.794031, 0.80091, 0.80729, 0.809719, 0.813243, 0.818824, 0.812538, 0.806677, 0.80119, 0.796034, 
     1       0.791173, 0.784579, 0.778607, 0.773154, 0.771606, 0.768139, 0.763499, 0.75762, 0.752139, 0.747007,
     1       0.742185, 0.737639, 0.729266, 0.721705, 0.718185, 0.714819, 0.708502, 0.705531, 0.702672, 0.695057,
     1       0.68798, 0.684621, 0.681373, 0.675182, 0.669361, 0.66387, 0.658677, 0.656183, 0.653752, 0.649072,
     1       0.644614, 0.634325, 0.625076, 0.616686, 0.614004, 0.609019, 0.601966, 0.595443, 0.58938, 0.58372, 
     1       0.578417, 0.573429, 0.568217, 0.5635, 0.559196, 0.555239, 0.551582, 0.548182, 0.545007, 0.542031,
     1       0.53923, 0.536587, 0.53171, 0.527296, 0.525238, 0.523268, 0.519566, 0.516143, 0.508268, 0.50098,
     1       0.497533, 0.494205, 0.487881, 0.481955, 0.476386, 0.471136, 0.466173, 0.461471, 0.457005, 0.450854, 
     1       0.445312, 0.440273, 0.435659, 0.431407, 0.427466, 0.423798, 0.420368, 0.417149, 0.414119  / 
      Data Phi2  /  0.522059168, 0.506594533, 0.523769, 0.532132, 0.535251, 0.539464, 0.544397, 0.54553, 
     1       0.550359, 0.557134, 0.559281, 0.567386, 0.571421, 0.575296, 0.577177, 0.579023, 0.582614, 
     1       0.586079, 0.588814, 0.591322, 0.593639, 0.594518, 0.595792, 0.597803, 0.598544, 0.59924, 
     1       0.599898, 0.600521, 0.601112, 0.596702, 0.592704, 0.58905, 0.588013, 0.585687, 0.582574, 
     1       0.581782, 0.581039, 0.58034, 0.579679, 0.579053, 0.577891, 0.576833, 0.576337, 0.575861, 
     1       0.574962, 0.574537, 0.574127, 0.575731, 0.577242, 0.577966, 0.578671, 0.580025, 0.581313,
     1       0.582541, 0.583714, 0.584282, 0.584837, 0.585914, 0.58695, 0.589374, 0.591595, 0.593646, 
     1       0.59431, 0.595552, 0.597331, 0.599001, 0.600573, 0.602059, 0.603468, 0.604808, 0.609499, 
     1       0.613813, 0.617809, 0.621532, 0.625018, 0.628296, 0.631392, 0.634324, 0.63711, 0.639765, 
     1       0.644727, 0.649291, 0.651443, 0.653517, 0.657455, 0.661142, 0.663272, 0.665279, 0.666241, 
     1       0.667177, 0.668977, 0.670689, 0.672322, 0.673883, 0.675377, 0.676811, 0.678189, 0.671656, 
     1       0.665747, 0.660357, 0.655406, 0.65083, 0.646578, 0.642609, 0.638889, 0.635391, 0.632089  / 


C     Current arrays are temporary placeholders. Initial values were for the suite of 85 spectral periods out to 3.0sec
C     and the 3 sec value was copied into the data array out to 10 sec. Also the PGV value is copied temporarily as the PGA value. 

      data Dc3Global  /  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  / 
      data Dc3ChinaTrk  /  0.00286, 0.00286, 0.00284, 0.00275, 0.00273, 0.00272, 0.00271, 0.00271, 0.00272, 0.00275, 
     1                     0.00276, 0.00283, 0.00286, 0.00289, 0.00291, 0.00292, 0.00295, 0.00298, 0.00301, 
     1                     0.00301, 0.003, 0.00299, 0.00297, 0.00294, 0.00293, 0.00292, 0.00291, 0.00291, 
     1                     0.0029, 0.00288, 0.00285, 0.00282, 0.0028, 0.00278, 0.00276, 0.00275, 0.00275, 
     1                     0.00275, 0.00275, 0.00273, 0.00264, 0.00251, 0.00244, 0.00237, 0.00225, 0.00219, 
     1                     0.00215, 0.00208, 0.00204, 0.00203, 0.00203, 0.00204, 0.00206, 0.0021, 0.00215, 
     1                     0.00217, 0.0022, 0.00225, 0.0023, 0.00241, 0.00249, 0.00255, 0.00257, 0.00261, 
     1                     0.00266, 0.00273, 0.00279, 0.00286, 0.00292, 0.00297, 0.00303, 0.00305, 0.00305,
     1                     0.00303, 0.00301, 0.00302, 0.00304, 0.00306, 0.00307, 0.00307, 0.00299, 0.00286, 
     1                     0.00277, 0.00269, 0.00254, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243,
     1                     0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243, 0.00243  / 
      data Dc3ItalyJapan  /  -0.00255, -0.00255, -0.00255, -0.00221, -0.0022, -0.00219, -0.00216, -0.00216, -0.00213,
     1                       -0.0021, -0.00208, -0.00203, -0.00201, -0.00199, -0.00198, -0.00197, -0.00196, -0.00195,
     1                       -0.00195, -0.00197, -0.00201, -0.00203, -0.00206, -0.00212, -0.00219, -0.00226, -0.00232,
     1                       -0.00238, -0.00244, -0.00253, -0.0026, -0.00264, -0.00265, -0.00267, -0.0027, -0.00272, 
     1                       -0.00275, -0.00278, -0.00282, -0.00288, -0.00302, -0.00316, -0.00322, -0.00327, -0.00332,
     1                       -0.00334, -0.00334, -0.00335, -0.00333, -0.00332, -0.00331, -0.00327, -0.00323, -0.00318,
     1                       -0.00313, -0.0031, -0.00307, -0.00301, -0.00296, -0.00284, -0.00274, -0.00267, -0.00264, 
     1                       -0.0026, -0.00254, -0.00248, -0.00242, -0.00235, -0.00228, -0.00221, -0.00206, -0.00189, 
     1                       -0.00173, -0.00157, -0.00143, -0.00131, -0.00121, -0.00114, -0.00108, -0.00105, -0.00104,
     1                       -0.00109, -0.00112, -0.00116, -0.00123, -0.00128, -0.00128, -0.00128, -0.00128, -0.00128, -0.00128,
     1                       -0.00128, -0.00128, -0.00128, -0.00128, -0.00128, -0.00128, -0.00128, -0.00128, -0.00128,
     1                       -0.00128, -0.00128  / 

      data Ck  /  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
     1    0.0, 0.0, 0.0  / 

C     Basin terms
      data f6  /  -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, 
     1      -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9,
     1      -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9,
     1      -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, 0.005828594, 0.026445503,
     1       0.055495036, 0.092259036, 0.140404486, 0.194954971, 0.25203482, 0.309399196, 0.366954397, 0.424517299, 
     1       0.481161353, 0.535968267, 0.588318983, 0.637893676, 0.688890073, 0.735781413, 0.779920766, 0.824265713,
     1       0.871376753, 0.920327295, 0.969309177, 1.016723853, 1.060103429, 1.09899486, 1.134793579, 1.134793579, 1.134793579,
     1       1.134793579, 1.134793579, 1.134793579, 1.134793579, 1.134793579, 1.134793579, 1.134793579, 1.134793579, 1.134793579,
     1       1.134793579, 1.134793579, 1.134793579, 1.134793579, 1.134793579  / 
      data f7  /  -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9,
     1      -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9,
     1      -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9,
     1      -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, -9.9, 0.00376198, 0.017099524, 0.035727688, 
     1       0.059023688, 0.088480942, 0.120292256, 0.151586304, 0.180774958, 0.207894202, 0.233095306, 0.256059658,
     1       0.276475905, 0.294236955, 0.309439975, 0.324490532, 0.337199059, 0.349628672, 0.364131615, 0.382450146, 
     1       0.404017146, 0.427420811, 0.451423337, 0.47422331, 0.495355417, 0.515851214, 0.515851214, 0.515851214, 0.515851214,
     1       0.515851214, 0.515851214, 0.515851214, 0.515851214, 0.515851214, 0.515851214, 0.515851214, 0.515851214, 0.515851214,
     1       0.515851214, 0.515851214, 0.515851214, 0.515851214  / 

C     Set constant parameters
      mref = 4.5
      rref = 1.0
      vref = 760.0
      f1 = 0.0
      f3 = 0.1
      V1 = 225.0
      V2 = 300.0

C First check for the PGA case (i.e., specT=0.0) 
      nPer = 107
      if (specT .eq. 0.0) then
         period1 = period(1)
         e0T = e0(1)
         e1T = e1(1)
         e2T = e2(1)
         e3T = e3(1)
         e4T = e4(1)
         e5T = e5(1)
         e6T = e6(1)
         mhT = mh(1)
         c1T = c1(1)
         c2T = c2(1)
         c3T = c3(1)        
         hT = h(1)
         VcT = vc(1)
         Dc3GlobalT = DC3global(1)
         Dc3ChinaTrkT = DC3ChinaTrk(1)
         Dc3ItalyJapanT = DC3ItalyJapan(1)
         f4T = f4(1)
         f5T = f5(1)
         f6T = f6(1)
         f7T = f7(1)
         R1T = R1(1)
         R2T = R2(1)
         l1T = l1(1)
         l2T = l2(1)
         t1T = t1(1)
         t2T = t2(1)
         DfrT = Dfr(1)
         DfvT = Dfv(1)

         ckT = ck(1)
         cvT = cv(1)
         phi1T = phi1(1)
         tau1T = tau1(1)
         phi2T = phi2(1)
         tau2T = tau2(1)

         goto 1011
      elseif (specT .eq. -1.0) then
         period1 = period(2)
         e0T = e0(2)
         e1T = e1(2)
         e2T = e2(2)
         e3T = e3(2)
         e4T = e4(2)
         e5T = e5(2)
         e6T = e6(2)
         mhT = mh(2)
         c1T = c1(2)
         c2T = c2(2)
         c3T = c3(2)        
         hT = h(2)
         VcT = vc(2)
         Dc3GlobalT = DC3global(2)
         Dc3ChinaTrkT = DC3ChinaTrk(2)
         Dc3ItalyJapanT = DC3ItalyJapan(2)
         f4T = f4(2)
         f5T = f5(2)
         f6T = f6(2)
         f7T = f7(2)
         R1T = R1(2)
         R2T = R2(2)
         l1T = l1(2)
         l2T = l2(2)
         t1T = t1(2)
         t2T = t2(2)
         DfrT = Dfr(2)
         DfvT = Dfv(2)

         ckT = ck(2)
         cvT = cv(2)
         phi1T = phi1(2)
         tau1T = tau1(2)
         phi2T = phi2(2)
         tau2T = tau2(2)

         goto 1011
      else 
C Now loop over the spectral period range of the attenuation relationship.
         do i=3,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020 
            endif
         enddo
      endif

C Selected spectral period is outside range defined by attenuaton model.
      write (*,*) 
      write (*,*) 'SSBA (NGA West2-2014) Vertical'
      write (*,*) 'attenuation model is not defined for a '
      write (*,*) ' spectral period of: ' 
      write (*,'(a10,f10.5)') ' Period = ',specT
      write (*,*) 'This spectral period is outside the defined'
      write (*,*) 'period range in the code or beyond the range'
      write (*,*) 'of spectral periods for interpolation.'
      write (*,*) 'Please check the input file.'
      write (*,*) 
      stop 99

C Interpolate the coefficients for the requested spectral period.
 1020       call interp (period(count1),period(count2),e0(count1),e0(count2),
     +                   specT,e0T,iflag)
            call interp (period(count1),period(count2),e1(count1),e1(count2),
     +                   specT,e1T,iflag)
            call interp (period(count1),period(count2),e2(count1),e2(count2),
     +                   specT,e2T,iflag)
            call interp (period(count1),period(count2),e3(count1),e3(count2),
     +                   specT,e3T,iflag)
            call interp (period(count1),period(count2),e4(count1),e4(count2),
     +                   specT,e4T,iflag)
            call interp (period(count1),period(count2),e5(count1),e5(count2),
     +                   specT,e5T,iflag)
            call interp (period(count1),period(count2),e6(count1),e6(count2),
     +                   specT,e6T,iflag)
            call interp (period(count1),period(count2),mh(count1),mh(count2),
     +                   specT,mhT,iflag)
            call interp (period(count1),period(count2),c1(count1),c1(count2),
     +                   specT,c1T,iflag)
            call interp (period(count1),period(count2),c2(count1),c2(count2),
     +                   specT,c2T,iflag)
            call interp (period(count1),period(count2),c3(count1),c3(count2),
     +                   specT,c3T,iflag)
            call interp (period(count1),period(count2),h(count1),h(count2),
     +                   specT,hT,iflag)
            call interp (period(count1),period(count2),DC3Global(count1),DC3Global(count2),
     +                   specT,DC3GlobalT,iflag)
            call interp (period(count1),period(count2),DC3ChinaTrk(count1),DC3ChinaTrk(count2),
     +                   specT,DC3ChinaTrkT,iflag)
            call interp (period(count1),period(count2),DC3ItalyJapan(count1),DC3ItalyJapan(count2),
     +                   specT,DC3ItalyJapanT,iflag)
            call interp (period(count1),period(count2),Vc(count1),Vc(count2),
     +                   specT,VcT,iflag)
            call interp (period(count1),period(count2),f4(count1),f4(count2),
     +                   specT,f4T,iflag)
            call interp (period(count1),period(count2),f5(count1),f5(count2),
     +                   specT,f5T,iflag)
            call interp (period(count1),period(count2),f6(count1),f6(count2),
     +                   specT,f6T,iflag)
            call interp (period(count1),period(count2),f7(count1),f7(count2),
     +                   specT,f7T,iflag)
            call interp (period(count1),period(count2),R1(count1),R1(count2),
     +                   specT,R1T,iflag)
            call interp (period(count1),period(count2),R2(count1),R2(count2),
     +                   specT,R2T,iflag)
            call interp (period(count1),period(count2),l1(count1),l1(count2),
     +                   specT,l1T,iflag)
            call interp (period(count1),period(count2),l2(count1),l2(count2),
     +                   specT,l2T,iflag)
            call interp (period(count1),period(count2),t1(count1),t1(count2),
     +                   specT,t1T,iflag)
            call interp (period(count1),period(count2),t2(count1),t2(count2),
     +                   specT,t2T,iflag)
            call interp (period(count1),period(count2),Dfr(count1),Dfr(count2),
     +                   specT,DfrT,iflag)
            call interp (period(count1),period(count2),Dfv(count1),Dfv(count2),
     +                   specT,DfvT,iflag)

            call interp (period(count1),period(count2),ck(count1),ck(count2),
     +                   specT,ckT,iflag)
            call interp (period(count1),period(count2),cv(count1),cv(count2),
     +                   specT,cvT,iflag)
            call interp (period(count1),period(count2),phi1(count1),phi1(count2),
     +                   specT,phi1T,iflag)
            call interp (period(count1),period(count2),phi2(count1),phi2(count2),
     +                   specT,phi2T,iflag)
            call interp (period(count1),period(count2),tau1(count1),tau1(count2),
     +                   specT,tau1T,iflag)
            call interp (period(count1),period(count2),tau2(count1),tau2(count2),
     +                   specT,tau2T,iflag)

 1011 period1 = specT                                                                                                              

C.....Set the mechanism terms based on ftype............
C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                    -120 < Rake <  -60
C     -0.5      Normal/Oblique            -150 < Rake < -120
C                                          -60 < Rake <  -30
C       0       Strike-Slip               -180 < Rake < -150
C                                          -30 < Rake <   30
C                                          150 < Rake <  180
C      0.5      Reverse/Oblique             30 < Rake <   60
C                                          120 < Rake <  150
C       1       Reverse                     60 < Rake <  120 
C     Note: Unknown Mechanism is not currently coded.  
      if (ftype .eq. -1.0) then
         mechS = 0.0
         mechN = 1.0
         mechR = 0.0
      elseif (ftype .eq. -0.5) then 
         mechS = 0.0
         mechN = 1.0
         mechR = 0.0
      elseif (ftype .eq. 0.0) then 
         mechS = 1.0
         mechN = 0.0
         mechR = 0.0
      elseif (ftype .eq. 0.5) then
         mechS = 0.0
         mechN = 0.0
         mechR = 1.0
      elseif (ftype .eq. 1.0) then
         mechS = 0.0
         mechN = 0.0
         mechR = 1.0
      endif 

C.....First compute the Reference Rock PGA value...........
C.....This will include the regional dependence for PGA....
C.....MAGNITUDE DEPENDENCE.................................
      if (mag .le. mh(1)) then
         term1 = ck(1) + e1(1)*mechS + e2(1)*mechN + e3(1)*mechR +
     1           e4(1)*(mag-mh(1)) + e5(1)*(mag-mh(1))**2.0
      else
         term1 = ck(1) + e1(1)*mechS + e2(1)*mechN + e3(1)*mechR +
     1           e6(1)*(mag-mh(1))
      endif
C.....Distance dependence......
      Rp = SQRT( Rbjf*Rbjf+h(1)*h(1) )

C.....Apply Regional term.....
C     For vertical set DC3 terms = 0 
      if (regionflag .eq. 0) then
         TERM2 = ( c1(1) + c2(1)*(mag-mref) ) * alog(Rp/rref) + 
     1          ( c3(1)   ) * (Rp-rref)
      elseif (regionflag .eq. 1) then
         TERM2 = ( c1(1) + c2(1)*(mag-mref) ) * alog(Rp/rref) + 
     1          ( c3(1)   ) * (Rp-rref)
      elseif (regionflag .eq. 2) then
         TERM2 = ( c1(1) + c2(1)*(mag-mref) ) * alog(Rp/rref) + 
     1          ( c3(1)  ) * (Rp-rref)      
      endif
      
      pga4nl = exp(term1+term2)


C.....Now compute the requested ground motion value........
C.....MAGNITUDE DEPENDENCE.................................
      if (mag .le. mhT) then
         term1 = ckT + e1T*mechS + e2T*mechN + e3T*mechR +
     1           e4T*(mag-mhT) + e5T*(mag-mhT)**2.0
      else
         term1 = ckT + e1T*mechS + e2T*mechN + e3T*mechR +
     1           e6T*(mag-mhT)
      endif

C.....Distance dependence......
      R = SQRT( Rbjf*Rbjf+hT*hT )

C     Now apply the regional attenuation differnece.
C     Global Case
C     For vertical set DC3 term = 0.0
      if (regionflag .eq. 0) then
         TERM2 = ( c1T + c2T*(mag-mref) ) * alog(R/rref) + 
     1        c3T * (R-rref) 
C     China-Turkey Case
      elseif (regionflag .eq. 1) then
         TERM2 = ( c1T + c2T*(mag-mref) ) * alog(R/rref) + 
     1        c3T * (R-rref) 
C     Italy-Japan Case
      elseif (regionflag .eq. 2) then
         TERM2 = ( c1T + c2T*(mag-mref) ) * alog(R/rref) + 
     1        c3T * (R-rref) 
      endif

C.....Site Response Term.........
C.....Now compute the site term........
C.....First the linear term......
      if (vs .lt. VcT ) then
         flin = cvT*alog(Vs/Vref)
      else
         flin = cvT*alog(VcT/Vref)
      endif

C.....Next the non-linear term......
      f2 = f4T*(exp(f5T*(min(vs,760.0)-360.0))-exp(f5T*(760.0-360.0))) 
      
C.....Now compute the basin effect term......
C Deviation from ln(Vs30) scaling: bedrock depth (Z1) effect for California.
      if (basinflag .eq. 1) then 
c     Compute the DeltaZ1 term. Apply the California model for all regions except for Japan. 
         if (regionflag .eq. 2) then
             deltaz1 = z10 -
     1           exp(-5.23/2.0 * alog((vs**2.0 + 412.29**2.0)/(1360.0**2.0 + 412.39**2.0)))/1000.0
         else
             deltaz1 = z10 -
     1           exp(-7.15/4.0 * alog((vs**4.0 + 570.94**4.0)/(1360.0**4.0 + 570.94**4.0)))/1000.0        
         endif

         if (specT .lt. 0.65) then
            fbasin = 0.0
         else
            if (deltaZ1 .le. f7T/f6T) then
               fbasin = f6T * deltaZ1
            elseif (deltaZ1 .gt. f7T/f6T) then
               fbasin = f7T
            endif
         endif
      else
         fbasin = 0.0
      endif

      TERM3 = flin + f1 + f2*alog((pga4nl+f3)/f3) + fBasin
      
      lnY = term1 + term2 + term3 
      period2 = period1

c     Now compute the sigma value which is a function of magnitude and Vs
C     Tau (Eq. 4.11)
c      if (mag .le. 4.5) then
c         tau = t1T
c      elseif (mag .gt. 4.5 .and. mag .lt. 5.5) then
c         tau = t1T + (t2T - t1T)*(mag - 4.5)
c      else
c         tau = t2T
c      endif
      
C     Phi - Magnitude (Eq. 4.12) 
c      if (mag .le. 4.5) then
c         phi = l1T
c      elseif (mag .gt. 4.5 .and. mag .lt. 5.5) then
c         phi = l1T + (l2T - l1T)*(mag - 4.5)
c      else
c         phi = l2T
c      endif

C     Phi - Distance (Eq. 4.13)
c      if (rbjf .le. R1T) then
c          phi = phi
c      elseif (rbjf .gt. R1T .and. rbjf .le. R2T) then
c          phi = phi + DfrT*( (alog(rbjf/R1T))/(alog(R2T/R1T)) )
c      else
c          phi = phi + DfrT 
c      endif

C     Phi - Vs30 (Eq. 4.14)
c      if (vs .ge. V2) then
c         phi = phi
c      elseif (vs .ge. V1 .and. vs .lt. V2) then
c         phi = phi - DfvT*( alog(V2/vs) / alog(V2/V1) )
c      else
c         phi = phi - DfvT
c      endif

C     Compute magnitude dependence on tau and phi values. 
      if (mag .le. 4.5) then
         tau = tau1T
      elseif (mag .gt. 4.5 .and. mag .lt. 5.5) then
         tau = tau1T + (tau2T - tau1T)*(mag - 4.5)
      else
         tau = tau2T
      endif
      if (mag .le. 4.5) then
         phi = phi1T
      elseif (mag .gt. 4.5 .and. mag .lt. 5.5) then
         phi = phi1T + (phi2T - phi1T)*(mag - 4.5)
      else
         phi = phi2T
      endif
      
      sigma = sqrt (tau**2 + phi**2)

C     Convert ground motion to units of gals.
      lnY = lnY + 6.89

      return
      END

c ---------------------------------------------------------------------            
C     *** Campbell and Bozorgnia NGA West2 (NGA-2013) ***
C         Earthquake Spectra Paper:
C            "Campbell-Bozorgnia NGA-West2 ground motion model
C                 for the average horizontal components of PGA, 
C                 PGV, and 5%-damped linear Response Spectra"
C             K. W. Campbel and Y. Bozorgnia
C     Notes:
C        Applicable Range:
C            3.3 < M < 8.5 (strike-slip)
C            3.3 < M < 8.0 (reverse)
C            3.3 < M < 7.5 (normal)
C            Distance < 300km
C            150 < Vs30m < 1500 m/s
C            0 < Z25 < 10 km
C            0 < Zhyp < 20 km
C            15 < Dip < 90 
C        Report provides formulation for estimating recommended
C           parameters when they are not defined (e.g., Z25 given Vs30m).
C           See Chapter 06 of the report. 
c ---------------------------------------------------------------------------            

      subroutine BC_NGAWest2_2013_Vert ( mag, Rrup, Rbjf, Ftype, specT, 
     1                     period2, lnY, sigma, iflag, vs,
     2                     depthtop, D25, Dip, depth, HWflag, Rx, rupwidth, regionflag, phi, tau ) 

C     Last Updated: 5/22/14

      parameter (MAXPER=23)
      REAL Period(MAXPER), C0(MAXPER), C1(MAXPER), C2(MAXPER), C3(MAXPER), C4(MAXPER), C5(MAXPER)
      REAL C6(MAXPER), C7(MAXPER), C8(MAXPER), C9(MAXPER), C10(MAXPER), C11(MAXPER), C12(MAXPER)
      REAL C13(MAXPER), C14(MAXPER), C15(MAXPER), C16(MAXPER), C17(MAXPER), C18(MAXPER), C19(MAXPER)
      REAL A2(MAXPER), h1(MAXPER), h2(MAXPER), h3(MAXPER), h4(MAXPER)
      REAL h5(MAXPER), h6(MAXPER)
      REAL K1(MAXPER), K2(MAXPER), K3(MAXPER)
      REAL C20(MAXPER), DC20CA(MAXPER), DC20JP(MAXPER), DC20CH(MAXPER)
      REAL T1(MAXPER), T2(MAXPER), phi1(MAXPER), Phi2(MAXPER), phic(MAXPER)
      REAL flnAF(MAXPER), rho(MAXPER)

      REAL MAG, RRUP, RBJF, VS, D25, FHWR, FHWM, FHWZ, FHWD, PGAROCK, C, N
      real sigmaT, lnY, ftype, ztor, Dip, Dmax, pgasoil, Rx, R1, R2, f1, f2
      real fhypH, D25_RK
      INTEGER count1, count2, HWFlag, regionflag

      real c0T, c1T, c2T, c3T, c4T, c5T, c6T, c7T, c8T, c9T, c10T, c11T, c12T
      real c13T, c14T, c15T ,c16T, c17T, c18T, c19T, c20T, Dc20CAT, Dc20JPT, Dc20CHT
      real k1T, k2T, k3T, a2T, h1T, h2T, h3T, h4T, h5T, h6T
      real t1T, t2T, phi1T, phi2T, phicT
      real rhoT, flnAFT

      real alpha, tau, s
      real tau_lnyB, tau_lnPGAB, phi_lnY, phi_lnyB, phi_lnPGAB, phi, sigmatot

C.....MODEL COEFFICIENTS.....................
      Data Period  /  0, -1, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 
     1                0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5, 10  / 
      Data c0  /  -4.729, -3.86, -4.674, -4.548, -4.05, -3.435, -3.435, -3.93, -5.505, -6.28, 
     1            -6.789, -7.4, -8.75, -9.74, -11.05, -12.184, -13.451, -13.7, -13.9, -14.59387, 
     2           -15.63449, -17.12864, -17.65672  / 
      Data c1  /  0.984, 1.51, 0.977, 0.976, 0.931, 0.887, 0.902, 0.993, 1.267, 1.366, 1.458, 1.528, 
     1            1.739, 1.872, 2.021, 2.18, 2.27, 2.271, 2.15, 2.132, 2.116, 2.223, 2.132  / 
      Data c2  /  0.537, 0.27, 0.533, 0.549, 0.628, 0.674, 0.726, 0.698, 0.51, 0.447, 0.274, 0.193, -0.02,
     1           -0.121, -0.042, -0.069, 0.047, 0.149, 0.368, 0.726, 1.027, 0.169, 0.367  / 
      Data c3  /  -1.499, -1.299, -1.485, -1.488, -1.494, -1.388, -1.469, -1.572, -1.669, -1.75, -1.711, 
     1            -1.77, -1.594, -1.577, -1.757, -1.707, -1.621, -1.512, -1.315, -1.506, -1.721, -0.756, -0.8  / 
      Data c4  /  -0.443, -0.379, -0.445, -0.453, -0.464, -0.552, -0.543, -0.47, -0.452, -0.435, -0.41, -0.305, 
     1            -0.446, -0.489, -0.53, -0.624, -0.686, -0.84, -0.890, -0.885, -0.878, -1.077, -1.282  /
      Data c5  /  -2.666, -2.383, -2.665, -2.699, -2.772, -2.76, -2.575, -2.461, -2.349, -2.335, -2.332, -2.297, 
     1            -2.219, -2.205, -2.143, -2.092, -1.913, -1.882, -1.789, -1.78139, -1.68982, -1.72135, -1.948  / 
      Data c6  /  0.214, 0.196, 0.214, 0.215, 0.216, 0.202, 0.177, 0.166, 0.164, 0.175, 0.183, 0.19, 0.185, 
     1            0.191, 0.188, 0.176, 0.144, 0.126, 0.105, 0.10009, 0.098, 0.125, 0.163  / 
      Data c7  /  7.166, 6.274, 7.136, 6.936, 7.235, 8.334, 8.761, 9.049, 8.633, 8.742, 8.4, 7.643, 7.059, 
     1            6.375, 5.166, 5.642, 5.963, 7.584, 8.645, 10.20357, 8.38571, 5.77927, 4.13478  / 
      Data c8  /  0, 0.111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.016, 0.032, 0.128, 0.255, 0.284, 0.26112,
     1            0.28229, 0.38692, 0.32216  / 
      Data c9  /  -0.23, -0.128, -0.229, -0.27, -0.315, -0.329, -0.29, -0.203, -0.203, -0.203, -0.203,
     1            -0.203, -0.203, -0.203, -0.203, -0.115, -0.005, 0.12, 0.17, 0.17, 0.17747, 0.38278, 0.33417  / 
      Data c10  /  0.759, 0.14, 0.759, 0.768, 0.766, 0.764, 0.795, 0.842, 0.736, 0.801, 0.715, 0.708, 0.683, 
     1             0.704, 0.602, 0.394, 0.328, 0.112, 0.011, 0, 0, 0, 0  / 
      Data c11  /  -0.356, -0.395, -0.354, -0.344, -0.297, -0.363, -0.427, -0.429, -0.421, -0.429, -0.438,
     1             -0.421, -0.401, -0.417, -0.49, -0.539, -0.611, -0.63, -0.562, -0.53663, -0.44173, 
     2             -0.3428, -0.19908  / 
      Data c12  /  1.019, 0.338, 1.015, 0.95, 1.056, 1.316, 1.758, 1.411, 1.227, 0.987, 0.577, 0.279,
     1             0.358, 0.229, 0.574, 0.98, 0.819, 0.044, -0.396, 0.00115, -0.59234, -1.13827, -0.32493 / 
      Data c13  /  0.373, 0.407, 0.372, 0.4, 0.394, 0.422, 0.336, 0.314, 0.289, 0.29, 0.303, 0.336, 0.358, 
     1             0.432, 0.459, 0.442, 0.52, 0.566, 0.562, 0.51499, 0.51133, 0.57479, 0.32431  / 
      Data c14  /  -0.1172, -0.0016, -0.1193, -0.1454, -0.1957, -0.187, -0.095, -0.0999, 0.0017, 0.0402,
     1              0.0468, 0.0255, 0.0606, 0.0904, 0.1776, 0.2389, 0.2758, 0.3051, 0.3482, 0.35267, 
     2              0.30443, 0.16789, 0.16858  / 
      Data c15  /  -0.097, 0.382, -0.094, -0.081, -0.091, -0.29, -0.261, -0.091, -0.092, -0.081, 
     1              0.011, 0.092, 0.122, 0.287, 0.292, 0.316, 0.45, 0.424, 0.3, 0.25726, 0.17039, 
     2              0.21872, 0.12681  / 
      Data c16  /  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data c17  /  0.102, 0.0581, 0.1026, 0.1059, 0.1175, 0.1238, 0.1088, 0.0918, 0.072, 0.0602,
     1             0.05, 0.0382, 0.0264, 0.0163, -0.0016, -0.0072, -0.0262, -0.0408, -0.0512, 
     2            -0.0567, -0.04288, -0.0308, 0.00668  / 
      Data c18  /  0.0442, 0.0294, 0.0452, 0.0427, 0.041, 0.0408, 0.0516, 0.0559, 0.0447, 0.0485, 
     1             0.0416, 0.0438, 0.0307, 0.0287, 0.0277, 0.0277, 0.0293, 0.0221, 0.0321, 0.02249, 
     2             0.02372, 0.0171, -0.00165  / 
      Data c19  /  0.00784, 0.00761, 0.00784, 0.00786, 0.00815, 0.00783, 0.00726, 0.00644, 0.00745, 
     1             0.00789, 0.00629, 0.00524, 0.00522, 0.00539, 0.00501, 0.00506, 0.00353, 0.0022, 
     2            -0.00137, 0.00053, 0.00233, -0.00298, 0.00092  / 
      Data c20  /  -0.0053, -0.0019, -0.0053, -0.0052, -0.0052, -0.0062, -0.0072, -0.0072, -0.0066, -0.0056,
     1             -0.0049, -0.0046, -0.0037, -0.0031, -0.0021, -0.0012, -0.0004, 0, 0, 0, 0, 0, 0  / 
      Data Dc20CA  /  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data Dc20JP  /  -0.0018, 0.0005, -0.0018, -0.0018, -0.002, -0.0026, -0.0021, -0.0018, -0.0018, 
     1                -0.0022, -0.0025, -0.0027, -0.0024, -0.0025, -0.0025, -0.0023, -0.0013, -0.0004,
     2                 0, 0, 0, 0, 0  / 
      Data Dc20CH  /  0.0039, 0.0019, 0.0039, 0.0036, 0.0033, 0.0039, 0.0048, 0.005, 0.0048, 0.0041, 
     1                0.0034, 0.0031, 0.0024, 0.0021, 0.002, 0.0012, 0.0004, 0, 0, 0, 0, 0, 0  / 
      Data a2  /  0.167, 0.596, 0.168, 0.166, 0.167, 0.173, 0.198, 0.174, 0.198, 0.204, 0.185, 0.164, 0.16, 
     1            0.184, 0.216, 0.596, 0.596, 0.596, 0.596, 0.596, 0.596, 0.596, 0.596  / 
      Data h1  /  0.241, 0.117, 0.242, 0.244, 0.246, 0.251, 0.26, 0.259, 0.254, 0.237, 0.206, 0.21, 0.226,
     1            0.217, 0.154, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117, 0.117  / 
      Data h2  /  1.474, 1.616, 1.471, 1.467, 1.467, 1.449, 1.435, 1.449, 1.461, 1.484, 1.581, 1.586, 
     1            1.544, 1.554, 1.626, 1.616, 1.616, 1.616, 1.616, 1.616, 1.616, 1.616, 1.616  / 
      Data h3  /  -0.715, -0.733, -0.714, -0.711, -0.713, -0.701, -0.695, -0.708, -0.715, -0.721, 
     1            -0.787, -0.795, -0.77, -0.77, -0.78, -0.733, -0.733, -0.733, -0.733, -0.733, -0.733, 
     2            -0.733, -0.733  / 
      Data h4  /  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  / 
      Data h5  /  -0.337, -0.128, -0.336, -0.339, -0.338, -0.338, -0.347, -0.391, -0.449, -0.393,
     1            -0.339, -0.447, -0.525, -0.407, -0.371, -0.128, -0.128, -0.128, -0.128, -0.128, 
     2            -0.128, -0.128, -0.128  / 
      Data h6  /  -0.27, -0.756, -0.27, -0.263, -0.259, -0.263, -0.219, -0.201, -0.099, -0.198, 
     1            -0.21, -0.121, -0.086, -0.281, -0.285, -0.756, -0.756, -0.756, -0.756, -0.756,
     2            -0.756, -0.756, -0.756  / 
      Data k1  /  865, 400, 865, 865, 908, 1054, 1086, 1032, 878, 748, 654, 587, 503, 457, 410, 
     1            400, 400, 400, 400, 400, 400, 400, 400  / 
      Data k2  /  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data k3  /  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data phi1  /  0.6939, 0.6081, 0.6949, 0.7002, 0.7215, 0.7513, 0.7401, 0.7233, 0.7306, 0.7006, 
     1            0.6867, 0.6683, 0.6275, 0.606, 0.5677, 0.536, 0.511, 0.5069, 0.4744, 0.4659,
     2            0.4301, 0.3859, 0.3952  / 
      Data phi2  /  0.4931, 0.4422, 0.4941, 0.5084, 0.536, 0.5844, 0.5783, 0.5704, 0.5361, 0.51, 
     1            0.5074, 0.5141, 0.5208, 0.5262, 0.5361, 0.5504, 0.559, 0.5706, 0.5573, 0.5664,
     2            0.5675, 0.527, 0.4807  / 
      Data t1  /  0.4612, 0.3344, 0.4617, 0.4741, 0.5291, 0.5761, 0.5231, 0.461, 0.3913, 0.3625,
     1            0.3546, 0.3551, 0.3595, 0.3762, 0.4156, 0.4719, 0.5065, 0.5386, 0.5147, 0.5531,
     2            0.5783, 0.5998, 0.4946  / 
      Data t2  /  0.3471, 0.2399, 0.3445, 0.3753, 0.4164, 0.4681, 0.4266, 0.3902, 0.3428, 0.308,
     1            0.2877, 0.2653, 0.2796, 0.2844, 0.3221, 0.3105, 0.3288, 0.3451, 0.335, 0.3305,
     2            0.2939, 0.3793, 0.4415  / 
      Data flnAF / 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 
     1             0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3  / 
      Data phiC  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data rho  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 

      nPer = 23
      c =  0.0
      n = 0.0

C First check for the PGA case (i.e., specT=0.0) 
      if (specT .eq. 0.0) then
         period1 = period(1)
         c0T = c0(1)
         c1T = c1(1)
         c2T = c2(1)
         c3T = c3(1)
         c4T = c4(1)
         c5T = c5(1)
         c6T = c6(1)
         c7T = c7(1)
         c8T = c8(1)
         c9T = c9(1)
         c10T = c10(1)
         c11T = c11(1)
         c12T = c12(1)
         c13T = c13(1)
         c14T = c14(1)
         c15T = c15(1)
         c16T = c16(1)
         c17T = c17(1)
         c18T = c18(1)
         c19T = c19(1)

         a2T = a2(1)
         h1T = h1(1)
         h2T = h2(1)
         h3T = h3(1)
         h4T = h4(1)
         h5T = h5(1)
         h6T = h6(1)

         k1T = k1(1)
         k2T = k2(1)
         k3T = k3(1)
         c20T = c20(1)
         Dc20CAT = Dc20CA(1)
         Dc20JPT = Dc20JP(1)
         Dc20CHT = Dc20CH(1)
         
         phi1T = phi1(1)
         phi2T = phi2(1)
         t1T = t1(1)
         t2T = t2(1)
         flnAFT = flnaf(1)
         phicT = phic(1)
         rhoT = rho(1)

         goto 1011
      elseif (specT .eq. -1.0) then
         period1 = period(2)
        c0T = c0(2)
         c1T = c1(2)
         c2T = c2(2)
         c3T = c3(2)
         c4T = c4(2)
         c5T = c5(2)
         c6T = c6(2)
         c7T = c7(2)
         c8T = c8(2)
         c9T = c9(2)
         c10T = c10(2)
         c11T = c11(2)
         c12T = c12(2)
         c13T = c13(2)
         c14T = c14(2)
         c15T = c15(2)
         c16T = c16(2)
         c17T = c17(2)
         c18T = c18(2)
         c19T = c19(2)
         
         a2T = a2(2)
         h1T = h1(2)
         h2T = h2(2)
         h3T = h3(2)
         h4T = h4(2)
         h5T = h5(2)
         h6T = h6(2)

         k1T = k1(2)
         k2T = k2(2)
         k3T = k3(2)
         c20T = c20(2)
         Dc20CAT = Dc20CA(2)
         Dc20JPT = Dc20JP(2)
         Dc20CHT = Dc20CH(2)
         
         phi1T = phi1(2)
         phi2T = phi2(2)
         t1T = t1(2)
         t2T = t2(2)
         flnAFT = flnaf(2)
         phicT = phic(2)
         rhoT = rho(2)

         goto 1011

      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=3,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020 
            endif
         enddo
      endif

C Selected spectral period is outside range defined by attenuaton model.
      write (*,*) 
      write (*,*) 'Bozorgnia&Campbell (NGA West2-2013) Vertical'
      write (*,*) 'attenuation model is not defined for a '
      write (*,*) ' spectral period of: ' 
      write (*,'(a10,f10.5)') ' Period = ',specT
      write (*,*) 'This spectral period is outside the defined'
      write (*,*) 'period range in the code or beyond the range'
      write (*,*) 'of spectral periods for interpolation.'
      write (*,*) 'Please check the input file.'
      write (*,*) 
      stop 99

C Interpolate the coefficients for the requested spectral period.
 1020       call interp (period(count1),period(count2),c0(count1),c0(count2),
     +                   specT,c0T,iflag)
            call interp (period(count1),period(count2),c1(count1),c1(count2),
     +                   specT,c1T,iflag)
            call interp (period(count1),period(count2),c2(count1),c2(count2),
     +                   specT,c2T,iflag)
            call interp (period(count1),period(count2),c3(count1),c3(count2),
     +                   specT,c3T,iflag)
            call interp (period(count1),period(count2),c4(count1),c4(count2),
     +                   specT,c4T,iflag)
            call interp (period(count1),period(count2),c5(count1),c5(count2),
     +                   specT,c5T,iflag)
            call interp (period(count1),period(count2),c6(count1),c6(count2),
     +                   specT,c6T,iflag)
            call interp (period(count1),period(count2),c7(count1),c7(count2),
     +                   specT,c7T,iflag)
            call interp (period(count1),period(count2),c8(count1),c8(count2),
     +                   specT,c8T,iflag)
            call interp (period(count1),period(count2),c9(count1),c9(count2),
     +                   specT,c9T,iflag)
            call interp (period(count1),period(count2),c10(count1),c10(count2),
     +                   specT,c10T,iflag)
            call interp (period(count1),period(count2),c11(count1),c11(count2),
     +                   specT,c11T,iflag)
            call interp (period(count1),period(count2),c12(count1),c12(count2),
     +                   specT,c12T,iflag)
            call interp (period(count1),period(count2),c13(count1),c13(count2),
     +                   specT,c13T,iflag)
            call interp (period(count1),period(count2),c14(count1),c14(count2),
     +                   specT,c14T,iflag)
            call interp (period(count1),period(count2),c15(count1),c15(count2),
     +                   specT,c15T,iflag)
            call interp (period(count1),period(count2),c16(count1),c16(count2),
     +                   specT,c16T,iflag)
            call interp (period(count1),period(count2),c17(count1),c17(count2),
     +                   specT,c17T,iflag)
            call interp (period(count1),period(count2),c18(count1),c18(count2),
     +                   specT,c18T,iflag)
            call interp (period(count1),period(count2),c19(count1),c19(count2),
     +                   specT,c19T,iflag)
            call interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call interp (period(count1),period(count2),h1(count1),h1(count2),
     +                   specT,h1T,iflag)
            call interp (period(count1),period(count2),h2(count1),h2(count2),
     +                   specT,h2T,iflag)
            call interp (period(count1),period(count2),h3(count1),h3(count2),
     +                   specT,h3T,iflag)
            call interp (period(count1),period(count2),h4(count1),h4(count2),
     +                   specT,h4T,iflag)
            call interp (period(count1),period(count2),h5(count1),h5(count2),
     +                   specT,h5T,iflag)
            call interp (period(count1),period(count2),h6(count1),h6(count2),
     +                   specT,h6T,iflag)

            call interp (period(count1),period(count2),k1(count1),k1(count2),
     +                   specT,k1T,iflag)
            call interp (period(count1),period(count2),k2(count1),k2(count2),
     +                   specT,k2T,iflag)
            call interp (period(count1),period(count2),k3(count1),k3(count2),
     +                   specT,k3T,iflag)

            call interp (period(count1),period(count2),c20(count1),c20(count2),
     +                   specT,c20T,iflag)
            call interp (period(count1),period(count2),Dc20CA(count1),Dc20CA(count2),
     +                   specT,Dc20CAT,iflag)
            call interp (period(count1),period(count2),Dc20JP(count1),Dc20JP(count2),
     +                   specT,Dc20JPT,iflag)
            call interp (period(count1),period(count2),Dc20CH(count1),Dc20CH(count2),
     +                   specT,Dc20CHT,iflag)
     
            call interp (period(count1),period(count2),phi1(count1),phi1(count2),
     +                   specT,phi1T,iflag)
            call interp (period(count1),period(count2),phi2(count1),phi2(count2),
     +                   specT,phi2T,iflag)
            call interp (period(count1),period(count2),t1(count1),t1(count2),
     +                   specT,t1T,iflag)
            call interp (period(count1),period(count2),t2(count1),t2(count2),
     +                   specT,t2T,iflag)
            call interp (period(count1),period(count2),flnAF(count1),flnAF(count2),
     +                   specT,flnAfT,iflag)
            call interp (period(count1),period(count2),phic(count1),phic(count2),
     +                   specT,phicT,iflag)
            call interp (period(count1),period(count2),rho(count1),rho(count2),
     +                   specT,rhoT,iflag)

 1011 period1 = specT                                                                                                              

C.....COMPUTE ROCK PGA VALUE FIRST.........................
C.....MAGNITUDE DEPENDENCE (Eq 3.2)........................
      IF (MAG .LE. 4.5) THEN
         TERM1 = C0(1) + C1(1)*MAG
      elseif (mag .le. 5.5) then
         TERM1 = C0(1) + c1(1)*MAG + c2(1)*(MAG-4.5)
      elseif (mag .le. 6.5) then
         TERM1 = C0(1) + C1(1)*MAG + c2(1)*(MAG-4.5) + c3(1)*(mag-5.5)
      ELSE
         TERM1 = C0(1) + C1(1)*MAG + c2(1)*(MAG-4.5) + C3(1)*(MAG-5.5) + c4(1)*(mag-6.5)
      ENDIF
      
C.....Distance dependence (Eq 3.3).....
      R = SQRT( RRUP*RRUP+C7(1)*C7(1) )
      TERM2 = (C5(1) + C6(1)*MAG)*ALOG(R)

C.....SET UP STYLE OF FAULTING TERMS (Eq 3.4, 3.5, and 3.6).........

C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C    -1,-0.5    Normal and NMl/Obl       -150 < Rake < -30.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C       0       Strike-Slip                    Otherwise
      IF (Ftype .EQ. 0.0) THEN
         TERM3 = 0.0
      ELSEIF (Ftype .ge. 0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C8(1)*(mag-4.5)
         else
            TERM3 = c8(1)
         endif
      ELSEIF (Ftype .le. -0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C9(1)*(mag-4.5)
         else
            TERM3 = C9(1)
         endif
      ENDIF

C.....SET UP HANGING WALL TERMS (Eq 3.7)..............
      if (HWflag .eq. 1) then
         R1 = rupwidth*cos(abs(dip)*3.14159/180.0)
         R2 = 62.0*mag - 350.0
         f1 = h1(1) + h2(1)*(Rx/R1) + h3(1)*(Rx/R1)**2.0
         f2 = h4(1) + h5(1)*((Rx-R1)/(R2-R1)) + h6(1)*((Rx-R1)/(R2-R1))**2.0
         if (Rrup .eq. 0.0) then
            fhwrrup = 1.0
         else
            fhwrrup = ((Rrup-Rbjf)/Rrup)         
         endif
         if (Rx .lt. R1) Then
            fhwr = f1*fhwrrup
         else
            fhwr = max(f2,0.0)*fhwrrup
         endif
         if (mag .le. 5.5) then
            fhwm = 0.0         
         elseif (mag .le. 6.5) then
            fhwm = (mag-5.5)*(1.0+a2(1)*(mag-6.5))
         else
            fhwm = 1.0 + a2(1)*(mag-6.5)        
         endif
         if (depthtop .le. 16.66) then
            fhwz = 1.0 - 0.06*depthtop 
         else
            fhwz = 0.0
         endif
         fhwd = (90.0 - dip)/45.0        
         TERM4 = c10(1)*fhwr*fhwm*fhwz*fhwd
      else   
         term4 = 0.0
      endif 

C.....NOW COMPUTE THE SITE CONDITION FACTORS...............
C.....(FOR PGA ROCK, VS=1100, i.e., Vs>k1)
      TERM5_RK = (C11(1) + K2(1)*n)*ALOG( 1100.0/K1(1) )
      if (regionflag .eq. 1) then
         TERM5_RK = TERM5_RK + (C13(1) + K2(1)*n)*ALOG( 1100.0/K1(1) )
      endif
C.....NOW COMPUTE THE SEDIMENT DEPTH DEPENDENCE (Eq 3.17)............
C     For Rock PGA the D25 value should be set at the recommended value of D25=0.398
      D25_RK = 0.398
      if (D25_RK .le. 1.0) then
         if (regionflag .eq. 1) then
c            TERM6 = (C14(1)+c15(1))*(D25-1.0)
            TERM6_RK = (C14(1)+c15(1))*(D25_RK-1.0)
         else
c            TERM6 = C14(1)*(D25-1.0)
            TERM6_RK = C14(1)*(D25_RK-1.0)
         endif   
      elseif (D25_RK .GT. 1.0 .AND. D25_RK .LE. 3.0) then
        TERM6_RK = 0.0
      elseif (D25_RK .GT. 3.0) then
         TERM6_RK = c16(1)*k3(1)*exp(-0.75)*(1.0-exp(-0.25*(D25_RK-3.0)))
      endif

C.....Now compute the hypocentral depth term (Eq 3.21).........
      if (depth .le. 7.0) then
         fhypH = 0.0
      elseif (depth .le. 20.0) then
         fhypH = depth - 7.0      
      else
         fhypH = 13.0
      endif
      if (mag .le. 5.5) then
          term7 = c17(1)*fhypH
      elseif (mag .le. 6.5) then
          term7 = (c17(1) + (c18(1)-c17(1))*(mag-5.5))*fhypH
      else
          term7 = c18(1)*fhypH     
      endif

C.....Compute Rupture Dip term (Eq 3.24)............
      if (mag .le. 4.5) then
          term8 = c19(1)*dip
      elseif (mag .le. 5.5) then
          term8 = c19(1)*(5.5-mag)*dip      
      else 
          term8 = 0.0
      endif

C.....Compute anelastic attenuation term.....
      if (Rrup .le. 80.0) then
         term9 = 0.0
      else      
         if (regionflag .eq. 0) then
            term9 = (c20(1)+Dc20CA(1) ) * (Rrup-80.0)
         elseif (regionflag .eq. 1) then
            term9 = (c20(1)+Dc20JP(1) ) * (Rrup-80.0)
         elseif (regionflag .eq. 2) then
            term9 = (c20(1)+Dc20CH(1) ) * (Rrup-80.0)      
         endif
      endif      
      
      PGAROCK = EXP(TERM1+TERM2+TERM3+TERM4+TERM5_RK+TERM6_RK+TERM7+TERM8+TERM9)
            
C.....For PGA Specific Vs30m Value
      if (vs .le. k1(1) ) then
         term5 = c11(1)*alog(vs/k1(1)) + 
     1           k2(1)*(alog(pgarock+c*((vs/k1(1))**n)) - 
     2           alog(pgarock+c))
      else
         term5 = (c11(1) + k2(1)*n)*alog(vs/k1(1))
      endif
      if (regionflag .eq. 1) then
         term5 = term5 + (c13(1)+k2(1)*n)*alog(1100./k1(1))
      endif

C.....NOW COMPUTE THE SEDIMENT DEPTH DEPENDENCE (Eq 3.17)............
C     For Rock PGA the D25 value should be set at the recommended value of D25=0.398
      if (D25 .le. 1.0) then
         if (regionflag .eq. 1) then
            TERM6 = (C14(1)+c15(1))*(D25-1.0)
         else
            TERM6 = C14(1)*(D25-1.0)
         endif   
      elseif (D25 .GT. 1.0 .AND. D25 .LE. 3.0) then
        TERM6 = 0.0
      elseif (D25 .GT. 3.0) then
         TERM6 = c16(1)*k3(1)*exp(-0.75)*(1.0-exp(-0.25*(D25-3.0)))
      endif

      pgasoil = alog(pgarock) - term5_rk - term6_RK + term5 + term6
      psoil2 = (TERM1+TERM2+TERM3+TERM4+TERM5+TERM6+TERM7+TERM8+TERM9)

c      write (*,*) pgarock, term1, term2, term3, term4, term5_rk, term6, term7, term8, term9
c      write (*,*) term5, exp(pgasoil)
c      write (*,*) exp(pgasoil), exp(psoil2)
c      pause


C.....NOW COMPUTE THE GROUND MOTION VALUES.................
C.....MAGNITUDE DEPENDENCE.................................
      IF (MAG .LE. 4.5) THEN
         TERM1 = C0T + C1T*MAG
      elseif (mag .le. 5.5) then
         TERM1 = C0T + c1T*MAG + c2T*(MAG-4.5)
      elseif (mag .le. 6.5) then
         TERM1 = C0T + C1T*MAG + c2T*(MAG-4.5) + c3T*(mag-5.5)
      ELSE
         TERM1 = C0T + C1T*MAG + c2T*(MAG-4.5) + C3T*(MAG-5.5) + c4T*(mag-6.5)
      ENDIF

C.....Distance dependence......
      R = SQRT( RRUP*RRUP+C7T*C7T )
      TERM2 = (C5T + C6T*MAG)*ALOG(R)

C.....SET UP STYLE OF FAULTING TERMS...........

C     Set mechanism term and corresponding Frv and Fnm values.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C    -1,-0.5    Normal and NMl/Obl       -150 < Rake < -30.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C       0       Strike-Slip                    Otherwise
      IF (Ftype .EQ. 0.0) THEN
         TERM3 = 0.0
      ELSEIF (Ftype .ge. 0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C8T*(mag-4.5)
         else
            TERM3 = C8T
         endif
      ELSEIF (Ftype .le. -0.5) THEN
         if (mag .le. 4.5) then
            TERM3 = 0.0
         elseif (mag .le. 5.5) then
            TERM3 = C9T*(mag-4.5)
         else
            TERM3 = C9T
         endif
      ENDIF

C.....SET UP HANGING WALL TERMS................
      if (HWflag .eq. 1) then
         R1 = rupwidth*cos(abs(dip)*3.14159/180.0)
         R2 = 62.0*mag - 350.0
         f1 = h1T + h2T*(Rx/R1) + h3T*(Rx/R1)**2.0
         f2 = h4T + h5T*((Rx-R1)/(R2-R1)) + h6T*((Rx-R1)/(R2-R1))**2.0
         if (Rrup .eq. 0.0) then
            fhwrrup = 1.0
         else
            fhwrrup = ((Rrup-Rbjf)/Rrup)         
         endif
         if (Rx .lt. R1) Then
            fhwr = f1*fhwrrup
         else
            fhwr = max(f2,0.0)*fhwrrup
         endif
         if (mag .le. 5.5) then
            fhwm = 0.0         
         elseif (mag .le. 6.5) then
            fhwm = (mag-5.5)*(1.0+a2T*(mag-6.5))
         else
            fhwm = 1.0 + a2T*(mag-6.5)        
         endif
         if (depthtop .le. 16.66) then
            fhwz = 1.0 - 0.06*depthtop 
         else
            fhwz = 0.0
         endif
         fhwd = (90.0 - dip)/45.0        
         TERM4 = c10T*fhwr*fhwm*fhwz*fhwd
      else   
         term4 = 0.0
      endif 

C.....NOW COMPUTE THE SITE CONDITION FACTORS...............
      IF (VS .LE. K1T ) THEN
         TERM5 = C11T*ALOG( VS/K1T ) +
     1           K2T*( ALOG( PGAROCK+c*( (VS/K1T)**N) ) -
     2           ALOG( PGAROCK+c ) )
      ELSE
         TERM5 = ( C11T+K2T*n )*ALOG( VS/K1T )
      ENDIF
c     Add Japan Site Term Effects
      if (regionflag .eq. 1) then
         IF (VS .LE. 200.0 ) THEN
            TERM5 = term5 + (C12T+k2T*n)*(alog(Vs/k1T)-alog(200/k1T))
         ELSE
            TERM5 = term5 + ( C13T+K2T*n )*ALOG( VS/K1T )
         ENDIF
      endif

C.....NOW COMPUTE THE SEDIMENT DEPTH DEPENDENCE.............
      IF (D25 .LE. 1.0) THEN
         if (regionflag .eq. 1) then
            TERM6 = (C14T+c15T)*(D25-1.0)
          else
            TERM6 = C14T*(D25-1.0)
          endif
      ELSEIF (D25 .GT. 1.0 .AND. D25 .LE. 3.0) THEN
         TERM6 = 0.0
      ELSEIF (D25 .GT. 3.0)  THEN
         TERM6 = c16T*k3T*exp(-0.75)*( 1.0 - exp(-0.25*(D25-3.0)))
      ENDIF
      
C.....Now compute the hypocentral depth term..........
      if (depth .le. 7.0) then
         fhypH = 0.0
      elseif (depth .le. 20.0) then
         fhypH = depth - 7.0      
      else
         fhypH = 13.0
      endif
      if (mag .le. 5.5) then
          term7 = c17T*fhypH
      elseif (mag .le. 6.5) then
          term7 = (c17T + (c18T-c17T)*(mag-5.5))*fhypH
      else
          term7 = c18T*fhypH     
      endif

C.....Compute Rupture Dip term.............
      if (mag .le. 4.5) then
          term8 = c19T*dip
      elseif (mag .le. 5.5) then
          term8 = c19T*(5.5-mag)*dip      
      else 
          term8 = 0.0
      endif

C.....Compute anelastic attenuation term.....
      if (Rrup .le. 80.0) then
         term9 = 0.0
      else
         if (regionflag .eq. 0) then
            term9 = (c20T+Dc20CAT)*(Rrup-80.0)
         elseif (regionflag .eq. 1) then
             term9 = (c20T+Dc20JPT)*(Rrup-80.0)
         elseif (regionflag .eq. 2) then
             term9 = (c20T+Dc20CHT)*(Rrup-80.0)
         endif
      endif

      LnY = (TERM1+TERM2+TERM3+TERM4+TERM5+TERM6+TERM7+TERM8+TERM9)

c      write (*,*) term1, term2, term3, term4, term5, term6, term7, term8, term9
c      write (*,*) exp(lnY)
c      write (*,*) term5, exp(pgasoil)
c      write (*,*) exp(pgasoil), exp(psoil2)
c      pause

C    Check that SA is not less than PGA for T<0.25sec
      if (specT .lt. 0.25) then
         if (lnY .lt. pgasoil ) then
            lnY = pgasoil
         endif
      endif

C.....Now compute the sigma value..........
c      IF (Vs .LT. k1T) THEN
c        alpha = k2T*pgarock*(1/(pgarock  
c     &    +c*(Vs/k1T)**n) 
c     &    -1/(pgarock + c))
c      ELSE

C  Set alhpa = 0.0 for current vertical model (8/22/13)
        alpha = 0.0

c      ENDIF

      If (Mag.le.4.5) then
	   tau_lnyB = t1T
	   tau_lnPGAB = t1(1)
	elseif (Mag.lt.5.5) then
	   tau_lnyB = t2T + 
     &          (t1T - t2T)*(5.5-mag)
	   tau_lnPGAB = t2(1) + 
     &          (t1(1) - t2(1))*(5.5-Mag)
	else
	   tau_lnyB = t2T
	   tau_lnPGAB = t2(1)
	endif

      tau = SQRT(tau_lnyB**2 +  
     &           (alpha * tau_lnPGAB)**2 +
     &           2.0*alpha*rhoT*tau_lnyB*tau_lnPGAB)

      If (Mag.le.4.5) then
	   phi_lny = phi1T
           phi_lnPGAB = phi1(1)
      elseif (Mag.lt.5.5) then
	   phi_lny = phi2T + 
     &          (phi1T - phi2T)*(5.5-mag)
	   phi_lnPGAB = phi2(1) + 
     &          (phi1(1) - phi2(1))*(5.5-mag)
      else
	   phi_lny = phi2T 
	   phi_lnPGAB = phi2(1) 
      endif

      phi_lnyB = SQRT(phi_lny**2 - flnAFT**2)

      phi_lnPGAB = SQRT(phi_lnPGAB**2 - flnAF(1)**2)

      phi = SQRT(phi_lny**2 + 
     &           (alpha*phi_lnPGAB)**2 +
     &           2.0*alpha*rhoT*phi_lnyB*phi_lnPGAB)

      Sigmatot = SQRT(phi**2 + Tau**2)

      period2 = period1
      
C     Convert ground motion to units of gals.
      lnY = lnY + 6.89
      sigma = sigmaTot

      return
      END





c ---------------------------------------------------------------------            
C ** Chiou and Youngs (NGA West2-2013 Model) Vertical **
C      Same function form as horizontal except for linear site response term.
C          For vertical: amp = phi1/(1+(Vs/phi1a)^phi1b)
c
C      Current version is not coded for different regions. 
C        Regional attenuation included based on Regionflag
C             0 = Global
C             1 = Japan/Italy
C             2 = Wenchuan (note only applicable for M7.9 event)
C         Sigma dependent on estimated or measured Vs30m based on 
C             Vs30_Class
C             0 = Estimated Vs30m
C             1 = Measured Vs30m
c ---------------------------------------------------------------------            

      Subroutine CY_NGAWest2_2013_V ( m, Rrup, Rbjf, specT,
     1                     period2, lnY, sigma, iflag, 
     2                     vs, Delta, DTor, Ftype, depthvs10, vs30_class,
     3                     hwflag, Rx, regionflag, phi, tau )

C     Last Updated: 9/26/13

      parameter (MAXPER=25)
      REAL Period(MAXPER), C1(MAXPER), C1a(MAXPER), C1b(MAXPER)
      REAL cn(MAXPER), cm(MAXPER), c5(MAXPER), c6(MAXPER)
      REAL c7(MAXPER), c9(MAXPER), gamma1(MAXPER), gamma2(MAXPER)
      REAL phi1(MAXPER), phi2(MAXPER), phi3(MAXPER), phi4(MAXPER)
      REAL phi5(MAXPER), phi6(MAXPER)
      REAL tau1(MAXPER), tau2(MAXPER), sigma1(MAXPER), sigma2(MAXPER)
      REAL sigma3(MAXPER), c9a(MAXPER)
      REAL c3(MAXPER), gm(MAXPER), c9b(MAXPER)
      Real CHM(MAXPER), C1c(MAXPER), C1d(MAXPER), C7b(MAXPER), C8b(MAXPER)
      real C11(MAXPER), C11B(MAXPER)
      real gscaleJapIt(MAXPER), gscaleWen(MAXPER), sigma2Jap(MAXPER)
      real phi1a(MAXPER), phi1b(MAXPER)
      real phi1JP(MAXPER), phi1aJP(MAXPER), phi1bJP(MAXPER), phi5JP(MAXPER), phi6JP(MAXPER)
      real phi1TW(MAXPER)
 
      REAL c1T, c1aT, c1bT, cnT, cmT, c5T, c6T, c7T, c9T, c9aT, c3T
      REAL gamma1T, gamma2T, phi1T, phi2T, phi3T, phi4T, sigma3T
      REAL phi5T, phi6T, tau1T, tau2T, sigma1T, sigma2T
      real C1cT, C1dT, C7bT, C11T, C11bT, CHMT
      REAL c2, c4, c4a, cRB, pi, d2r, gamma, gmT, c9bT
      real cc, cosdelta, r1, r2, r3, r4, hw, psa_ref, psa, a, b, c
      integer iflag, count1, count2, hwflag, vs30_class, regionflag
      REAL M, RRUP, RBJF, DTOR, Delta, specT, sigma, Ftype, Rx
      REAL period2, lnY, F_RV, F_NM, depthvs10, sigma_M, tau, NL, rkdepth
      real c8, c8a, c8bT, deltaZ1, fd, cDPP
      real NL0, sigma_NL0, F_Measured, F_Inferred, mz_TOR, deltaZ_TOR, coshM
      real gscaleJapItT, gscaleWenT, sigma2JapT
      real phi1aT, phi1bT
      real phi1JPT, phi1aJPT, phi1bJPT, phi5JPT, phi6JPT, phi1TWT


      data period     /
     1              0.0000, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500,
     1              0.0750, 0.1000, 0.1200, 0.1500, 0.1700,
     1              0.2000, 0.2500, 0.3000, 0.4000, 0.5000,
     1              0.7500, 1.0000, 1.5000, 2.0000, 3.0000,
     1              4.0000, 5.0000, 7.5000,10.0000/
      data c1      /
     1              -2.2621, -2.2621, -2.2629, -2.1389, -1.9451, -1.7424,
     1              -1.3529, -1.2191, -1.2007, -1.2392, -1.2856,
     1              -1.3599, -1.4633, -1.5533, -1.7318, -1.9025,
     1              -2.2740, -2.5805, -3.0470, -3.3941, -3.8807,
     1              -4.2259, -4.4937, -4.9802, -5.3254/
      data c1a     /
     1               0.1650,  0.1650,  0.1650,  0.1650,  0.1650,  0.1650,
     1               0.1650,  0.1650,  0.1650,  0.1650,  0.1650,
     1               0.1650,  0.1650,  0.1650,  0.1650,  0.1650,
     1               0.1650,  0.1650,  0.1650,  0.1645,  0.1168,
     1               0.0732,  0.0484,  0.0220,  0.0124/
      data c1b     /
     1              -0.2550, -0.2550, -0.2550, -0.2550, -0.2550, -0.2550,
     1              -0.2540, -0.2530, -0.2520, -0.2500, -0.2480,
     1              -0.2449, -0.2382, -0.2313, -0.2146, -0.1972,
     1              -0.1620, -0.1400, -0.1184, -0.1100, -0.1040,
     1              -0.1020, -0.1010, -0.1010, -0.1000/
      data c1c     /
     1              -0.1650, -0.1650, -0.1650, -0.1650, -0.1650, -0.1650,
     1              -0.1650, -0.1650, -0.1650, -0.1650, -0.1650,
     1              -0.1650, -0.1650, -0.1650, -0.1650, -0.1650,
     1              -0.1650, -0.1650, -0.1650, -0.1645, -0.1168,
     1              -0.0732, -0.0484, -0.0220, -0.0124/
      data c1d     /
     1               0.2550,  0.2550,  0.2550,  0.2550,  0.2550,  0.2550,
     1               0.2540,  0.2530,  0.2520,  0.2500,  0.2480,
     1               0.2449,  0.2382,  0.2313,  0.2146,  0.1972,
     1               0.1620,  0.1400,  0.1184,  0.1100,  0.1040,
     1               0.1020,  0.1010,  0.1010,  0.1000/
      data cn      /
     1             16.0875, 16.0875, 15.7118, 15.8819, 16.4556, 17.6453,
     1             20.1772, 19.9992, 18.7106, 16.6246, 15.3709,
     1             13.7012, 11.2667,  9.1908,  6.5459,  5.2305,
     1              3.7896,  3.3024,  2.8498,  2.5417,  2.1488,
     1              1.8957,  1.7228,  1.5737,  1.5265/
      data cM      /
     1             4.9993,  4.9993,  4.9993,  4.9993,  4.9993,  4.9993,
     1             5.0031,  5.0172,  5.0315,  5.0547,  5.0704,
     1             5.0939,  5.1315,  5.1670,  5.2317,  5.2893,
     1             5.4109,  5.5106,  5.6705,  5.7981,  5.9983,
     1             6.1552,  6.2856,  6.5428,  6.7415/
      data c3      /
     1               1.8616,  1.8616,  1.8523,  1.8070,  1.7860,  1.7827,
     1               1.8426,  1.9156,  1.9704,  2.0474,  2.0958,
     1               2.1638,  2.2628,  2.3439,  2.4636,  2.5461,
     1               2.6723,  2.7479,  2.8355,  2.8806,  2.9304,
     1               2.9629,  2.9804,  2.9884,  2.9925/
      data c5      /
     1               5.4530,  5.4530,  5.0265,  4.5820,  4.4501,  4.6504,
     1               5.8073,  6.9412,  7.6152,  8.3585,  8.7181,
     1               9.1170,  9.5761,  9.8569, 10.1521, 10.2969,
     1              10.4613, 10.5397, 10.5992, 10.6045, 10.6005,
     1              10.6133, 10.6278, 10.6457, 10.6500/
      data cHM     /
     1             3.0956, 3.0956, 3.0963, 3.0974, 3.0988, 3.1011,
     1             3.1094, 3.2381, 3.3407, 3.4300, 3.4688,
     1             3.5146, 3.5746, 3.6232, 3.6945, 3.7401,
     1             3.7941, 3.8144, 3.8284, 3.8330, 3.8361,
     1             3.8369, 3.8376, 3.8380, 3.8380/
      data c6      /
     1               0.5080,  0.5080,  0.5080,  0.5080,  0.5080,  0.5080,
     1               0.5080,  0.5080,  0.5080,  0.5080,  0.5080,
     1               0.5080,  0.5068,  0.5050,  0.5007,  0.4961,
     1               0.4846,  0.4704,  0.4401,  0.4264,  0.4183,
     1               0.4170,  0.4170,  0.4170,  0.4170/
      data c7      /
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0000,  0.0000,  0.0000,  0.0000/
      data c7b     /
     1               0.0855,  0.0855,  0.0871,  0.0957,  0.1032,  0.1066,
     1               0.0952,  0.0829,  0.0750,  0.0654,  0.0601,
     1               0.0531,  0.0430,  0.0340,  0.0183,  0.0056,
     1              -0.0158, -0.0280, -0.0422, -0.0511, -0.0573,
     1              -0.0580, -0.0578, -0.0574, -0.0572/
      data c8b     /
     1             0.4833,  0.4833,  1.2144,  1.6421,  1.9456,  2.1810,
     1             2.6087,  2.9122,  3.1045,  3.3399,  3.4719,
     1             3.6434,  3.8787,  4.0711,  4.3745,  4.6099,
     1             5.0376,  5.3411,  5.7688,  6.0723,  6.5000,
     1             6.8035,  7.0389,  7.4666,  7.7700/
      data c9      /
     1             0.9228,  0.9228,  0.9296,  0.9396,  0.9661,  0.9794,
     1             1.0260,  1.0177,  1.0008,  0.9801,  0.9652,
     1             0.9459,  0.9196,  0.8829,  0.8302,  0.7884,
     1             0.6754,  0.6196,  0.5101,  0.3917,  0.1244,
     1             0.0086,  0.0000,  0.0000,  0.0000/
      data c9a     /
     1             0.1202,  0.1202,  0.1217,  0.1194,  0.1166,  0.1176,
     1             0.1171,  0.1146,  0.1128,  0.1106,  0.1150,
     1             0.1208,  0.1208,  0.1175,  0.1060,  0.1061,
     1             0.1000,  0.1000,  0.1000,  0.1000,  0.1000,
     1             0.1000,  0.1000,  0.1000,  0.1000/
      data c9b     /
     1             6.8607,  6.8607,  6.8697,  6.9113,  7.0271,  7.0959,
     1             7.3298,  7.2588,  7.2372,  7.2109,  7.2491,
     1             7.2988,  7.3691,  6.8789,  6.5334,  6.5260,
     1             6.5000,  6.5000,  6.5000,  6.5000,  6.5000,
     1             6.5000,  6.5000,  6.5000,  6.5000/
      data c11     /
     1                0.0,     0.0,     0.0,     0.0,     0.0,     0.0,
     1                0.0,     0.0,     0.0,     0.0,     0.0,
     1                0.0,     0.0,     0.0,     0.0,     0.0,
     1                0.0,     0.0,     0.0,     0.0,     0.0,
     1                0.0,     0.0,     0.0,     0.0/
      data c11b    /
     1             -0.4536, -0.4536, -0.4536, -0.4536, -0.4536, -0.4536,
     1             -0.4536, -0.4536, -0.4536, -0.4536, -0.4536,
     1             -0.4440, -0.3539, -0.2688, -0.1793, -0.1428,
     1             -0.1138, -0.1062, -0.1020, -0.1009, -0.1003,
     1             -0.1001, -0.1001, -0.1000, -0.1000/
      data gamma1 /
     1            -0.008417, -0.008417, -0.008481, -0.008932, -0.009703, -0.010482,
     1            -0.011693, -0.012062, -0.011818, -0.011159, -0.010722,
     1            -0.010167, -0.009458, -0.008921, -0.008054, -0.007270,
     1            -0.005543, -0.004344, -0.002889, -0.002093, -0.001527,
     1            -0.001335, -0.001222, -0.001049, -0.000965/
      data gamma2 /
     1            -0.004814, -0.004814, -0.004885, -0.005076, -0.004914, -0.004666,
     1            -0.003703, -0.002599, -0.002106, -0.001746, -0.001606,
     1            -0.001439, -0.001180, -0.000906, -0.000467, -0.000349,
     1            -0.000887, -0.001487, -0.002241, -0.002569, -0.002509,
     1            -0.002381, -0.002351, -0.002435, -0.002529/
      data gm /
     1             4.2542,  4.2542,  4.2386,  4.2519,  4.2960,  4.3578,
     1             4.5455,  4.7603,  4.8963,  5.0644,  5.1371,
     1             5.1880,  5.2164,  5.1954,  5.0899,  4.7854,
     1             4.3304,  4.1667,  4.0029,  3.8949,  3.7928,
     1             3.7443,  3.7090,  3.6632,  3.6230/
      data gscaleJapIt     /
     1             1.281752,  1.281752,  1.276927,  1.276432,  1.276923,  1.265210,
     1             1.217216,  1.169973,  1.161510,  1.171001,  1.178526,
     1             1.184540,  1.186356,  1.184606,  1.185796,  1.215778,
     1             1.301371,  1.416221,  1.786270,  2.049840,  2.154466,
     1             2.150556,  2.151376,  2.161172,  2.162603/
      data gscaleWen     /
     1             0.677079,  0.677079,  0.673024,  0.671230,  0.670425,  0.670146,
     1             0.669435,  0.664965,  0.658557,  0.646074,  0.637167,
     1             0.623973,  0.603607,  0.584897,  0.549356,  0.515582,
     1             0.442912,  0.388603,  0.331534,  0.000000,  0.000000,
     1             0.000000,  0.000000,  0.000000,  0.000000/
      data phi1    /
     1               0.8700,  0.8700,  0.8700,  0.8700,  0.8700,  0.8700,
     1               0.8700,  0.8700,  0.8700,  0.8700,  0.8700,
     1               0.8700,  0.8652,  0.8434,  0.7698,  0.7263,
     1               0.7360,  0.7960,  0.9023,  1.0001,  1.1271,
     1               1.0779,  0.8618,  0.5114,  0.4530/
      data phi1a   /
     1             660.6864,660.6864,660.5587,660.3290,659.9916,659.5425,
     1             657.9160,655.5663,653.1736,648.7759,645.3512,
     1             639.5540,628.4873,616.2557,590.7750,566.8623,
     1             522.1539,496.2030,472.2639,462.7207,455.6782,
     1             453.2343,452.1290,451.0754,450.7240/
      data phi1b   /
     1               3.0000,  3.0000,  3.0000,  3.0000,  3.0000,  3.0000,
     1               3.0050,  3.3600,  4.0620,  4.9290,  5.2620,
     1               5.5530,  5.8540,  6.0610,  6.2920,  6.3790,
     1               6.3600,  6.2200,  5.7160,  4.9520,  3.3470,
     1               3.0000,  2.9800,  3.0000,  3.0000/
      data phi2    /
     1             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1             0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1             0.0000,  0.0000,  0.0000,  0.0000/
      data phi3    /
     1             -0.007010,-0.007010,-0.007279,-0.007354,-0.006977,-0.006467,
     1             -0.005734,-0.005604,-0.005696,-0.005845,-0.005959,
     1             -0.006141,-0.006439,-0.006704,-0.007125,-0.007435,
     1             -0.008120,-0.008444,-0.007707,-0.004792,-0.001828,
     1             -0.001523,-0.001440,-0.001369,-0.001361/
      data phi4    /
     1              0.102151, 0.102151, 0.108360, 0.119888, 0.133641, 0.148927,
     1              0.190596, 0.230662, 0.253169, 0.266468, 0.265060,
     1              0.255253, 0.231541, 0.207277, 0.165464, 0.133828,
     1              0.085153, 0.058595, 0.031787, 0.019716, 0.009643,
     1              0.005379, 0.003223, 0.001134, 0.000515/
      data phi5    /
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     1               0.0460,  0.1100,  0.1990,  0.2600,  0.3120,
     1               0.3020,  0.2540,  0.1540,  0.0860/
      data phi6    /
     1              300.00, 300.00, 300.00, 300.00, 300.00, 300.00,
     1              300.00, 300.00, 300.00, 300.00, 300.00,
     1              300.00, 300.00, 300.00, 300.00, 300.00,
     1              300.00, 300.00, 300.00, 300.00, 300.00,
     1              300.00, 300.00, 300.00, 300.00/
      data phi1Jp  /
     1               0.7780,  0.7780,  0.7598,  0.7062,  0.6572,  0.6389,
     1               0.7371,  0.8740,  0.9769,  1.1222,  1.2109,
     1               1.3421,  1.5379,  1.6771,  1.7600,  1.7310,
     1               1.4999,  1.2900,  1.0539,  0.9199,  0.7245,
     1               0.5703,  0.4228,  0.1259,  0.0448/
      data phi1aJp /
     1             460.5000,460.5000,461.9000,461.3288,460.4794,459.9103,
     1             460.5506,461.7000,459.8409,451.6690,443.1147,
     1             427.7425,399.7592,373.9212,340.0498,336.1073,
     1             391.7776,435.5000,454.1437,455.7000,454.4288,
     1             453.4794,453.4000,454.3506,454.6000/
      data phi1bJp /
     1               3.0000,  3.0000,  3.0000,  3.0000,  3.0000,  3.0000,
     1               2.9950,  2.9400,  2.8420,  2.6520,  2.4780,
     1               2.1550,  1.6980,  1.4360,  1.2060,  1.1400,
     1               1.3700,  1.6000,  2.0880,  2.4220,  2.8240,
     1               2.9900,  3.0000,  3.0000,  3.0000/
      data phi5Jp  /
     1               0.4770,  0.4770,  0.4730,  0.4680,  0.4620,  0.4580,
     1               0.4510,  0.4480,  0.4470,  0.4450,  0.4450,
     1               0.4440,  0.4450,  0.4470,  0.4560,  0.4700,
     1               0.5210,  0.5910,  0.7570,  0.9240,  1.1570,
     1               1.2600,  1.2400,  0.8540,  0.4160/
      data phi6Jp  /
     1              800.0000,800.0000,800.0000,800.0000,800.0000,800.0000,
     1              800.0000,800.0000,800.0000,800.0000,800.0000,
     1              800.0000,800.0000,800.0000,800.0000,800.0000,
     1              800.0000,800.0000,800.0000,800.0000,800.0000,
     1              800.0000,800.0000,800.0000,800.0000/
      data phi1Tw  /
     1               0.2000,  0.2000,  0.2000,  0.2000,  0.2000,  0.2000,
     1               0.2000,  0.2000,  0.2000,  0.2000,  0.2000,
     1               0.2000,  0.2000,  0.2000,  0.2000,  0.2000,
     1               0.2000,  0.2000,  0.2140,  0.3285,  0.6632,
     1               0.8428,  0.7903,  0.4874,  0.2660/
      data tau1    /
     1               0.4200,  0.4200,  0.4230,  0.4271,  0.4309,  0.4341,
     1               0.4404,  0.4450,  0.4479,  0.4514,  0.4533,
     1               0.4558,  0.4590,  0.4615,  0.4652,  0.4679,
     1               0.4724,  0.4753,  0.4788,  0.4811,  0.4838,
     1               0.4856,  0.4868,  0.4887,  0.4899/
      data tau2    /
     1               0.3300,  0.3300,  0.3289,  0.3273,  0.3259,  0.3247,
     1               0.3223,  0.3206,  0.3195,  0.3182,  0.3175,
     1               0.3166,  0.3154,  0.3144,  0.3130,  0.3120,
     1               0.3103,  0.3093,  0.3079,  0.3071,  0.3061,
     1               0.3054,  0.3050,  0.3042,  0.3038/
      data sigma1  /
     1               0.4912,  0.4912,  0.4904,  0.4988,  0.5049,  0.5096,
     1               0.5179,  0.5236,  0.5221,  0.5202,  0.5191,
     1               0.5177,  0.5159,  0.5143,  0.5119,  0.5100,
     1               0.4973,  0.4882,  0.4755,  0.4681,  0.4617,
     1               0.4571,  0.4535,  0.4471,  0.4426/
      data sigma2  /
     1               0.3762,  0.3762,  0.3762,  0.3849,  0.3910,  0.3957,
     1               0.4043,  0.4104,  0.4109,  0.4116,  0.4119,
     1               0.4124,  0.4130,  0.4135,  0.4144,  0.4150,
     1               0.4256,  0.4331,  0.4436,  0.4511,  0.4617,
     1               0.4571,  0.4535,  0.4471,  0.4426/
      data sigma3  /
     1               0.8000,  0.8000,  0.8000,  0.8000,  0.8000,  0.8000,
     1               0.8000,  0.8000,  0.8000,  0.8000,  0.8000,
     1               0.8000,  0.7999,  0.7997,  0.7988,  0.7966,
     1               0.7792,  0.7504,  0.7136,  0.7035,  0.7006,
     1               0.7001,  0.7000,  0.7000,  0.7000/


C Find the requested spectral period and corresponding coefficients
      nPer = 25
C First check for the PGA case (i.e., specT=0.0) 
      if (specT .eq. 0.0) then
         period1  = period(1)
         c1T      = c1(1)
         c1aT     = c1a(1)
         c1bT     = c1b(1)
         c1cT     = c1c(1)
         c1dT     = c1d(1)
         c3T      = c3(1)
         cHMT     = CHM(1)
         cnT      = cn(1)
         cmT      = cm(1)
         c5T      = c5(1)
         c6T      = c6(1)
         c7T      = c7(1) 
         c7bT      = c7b(1) 
         c8bT      = c8b(1)
         c9T      = c9(1)
         c9aT      = c9a(1)
         c9bT      = c9b(1)
         c11T      = c11(1)
         c11bT      = c11b(1)
         gamma1T  = gamma1(1)
         gamma2T  = gamma2(1)
         gmT      = gm(1)
         phi1T    = phi1(1)
         phi2T    = phi2(1)
         phi3T    = phi3(1)
         phi4T    = phi4(1)
         phi5T    = phi5(1)
         phi6T    = phi6(1)
         tau1T    = tau1(1)
         tau2T    = tau2(1)
         sigma1T = sigma1(1)
         sigma2T = sigma2(1)
         sigma2JapT = sigma2Jap(1)
         sigma3T = sigma3(1)
         gscaleJapItT = gscaleJapIt(1)
         gscaleWenT = gscaleWen(1)

         phi1aT = phi1a(1)
         phi1bT = phi1b(1)
         phi1JPT = phi1JP(1)
         phi1aJPT = phi1aJP(1)
         phi1bJPT = phi1bJP(1)
         phi5JPT = phi5JP(1)
         phi6JPT = phi6JP(1)
         phi1TWT = phi1TW(1)

         goto 1011
      elseif (specT .gt. 0.0) then
C Now loop over the spectral period range of the attenuation relationship.
         do i=2,nper-1
            if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
               count1 = i
               count2 = i+1
               goto 1020 
            endif
         enddo
      endif

C Selected spectral period is outside range defined by attenuaton model.
      write (*,*) 
      write (*,*) 'Chiou and Youngs (NGA West2-2013) Vertical'
      write (*,*) 'attenuation model is not defined for a '
      write (*,*) ' spectral period of: ' 
      write (*,'(a10,f10.5)') ' Period = ',specT
      write (*,*) 'This spectral period is outside the defined'
      write (*,*) 'period range in the code or beyond the range'
      write (*,*) 'of spectral periods for interpolation.'
      write (*,*) 'Please check the input file.'
      write (*,*) 
      stop 99

C Interpolate the coefficients for the requested spectral period.
 1020       call interp (period(count1),period(count2),c1(count1),c1(count2),
     +                   specT,c1T,iflag)
            call interp (period(count1),period(count2),c1a(count1),c1a(count2),
     +                   specT,c1aT,iflag)
            call interp (period(count1),period(count2),c1b(count1),c1b(count2),
     +                   specT,c1bT,iflag)
            call interp (period(count1),period(count2),c1c(count1),c1c(count2),
     +                   specT,c1cT,iflag)
            call interp (period(count1),period(count2),c1d(count1),c1d(count2),
     +                   specT,c1dT,iflag)
            call interp (period(count1),period(count2),cn(count1),cn(count2),
     +                   specT,cnT,iflag)
            call interp (period(count1),period(count2),cm(count1),cm(count2),
     +                   specT,cmT,iflag)
            call interp (period(count1),period(count2),cHM(count1),cHM(count2),
     +                   specT,cHMT,iflag)
            call interp (period(count1),period(count2),c3(count1),c3(count2),
     +                   specT,c3T,iflag)
            call interp (period(count1),period(count2),c5(count1),c5(count2),
     +                   specT,c5T,iflag)
            call interp (period(count1),period(count2),c6(count1),c6(count2),
     +                   specT,c6T,iflag)
            call interp (period(count1),period(count2),c7(count1),c7(count2),
     +                   specT,c7T,iflag)
            call interp (period(count1),period(count2),c7b(count1),c7b(count2),
     +                   specT,c7bT,iflag)
            call interp (period(count1),period(count2),c8b(count1),c8b(count2),
     +                   specT,c8bT,iflag)
            call interp (period(count1),period(count2),c9(count1),c9(count2),
     +                   specT,c9T,iflag)
            call interp (period(count1),period(count2),c9a(count1),c9a(count2),
     +                   specT,c9aT,iflag)
            call interp (period(count1),period(count2),c9b(count1),c9b(count2),
     +                   specT,c9bT,iflag)
            call interp (period(count1),period(count2),c11(count1),c11(count2),
     +                   specT,c11T,iflag)
            call interp (period(count1),period(count2),c11b(count1),c11b(count2),
     +                   specT,c11bT,iflag)
            call interp (period(count1),period(count2),gamma1(count1),gamma1(count2),
     +                   specT,gamma1T,iflag)
            call interp (period(count1),period(count2),gamma2(count1),gamma2(count2),
     +                   specT,gamma2T,iflag)
            call interp (period(count1),period(count2),gm(count1),gm(count2),
     +                   specT,gmT,iflag)
            call interp (period(count1),period(count2),phi1(count1),phi1(count2),
     +                   specT,phi1T,iflag)
            call interp (period(count1),period(count2),phi2(count1),phi2(count2),
     +                   specT,phi2T,iflag)
            call interp (period(count1),period(count2),phi3(count1),phi3(count2),
     +                   specT,phi3T,iflag)
            call interp (period(count1),period(count2),phi4(count1),phi4(count2),
     +                   specT,phi4T,iflag)
            call interp (period(count1),period(count2),phi5(count1),phi5(count2),
     +                   specT,phi5T,iflag)
            call interp (period(count1),period(count2),phi6(count1),phi6(count2),
     +                   specT,phi6T,iflag)
            call interp (period(count1),period(count2),tau1(count1),tau1(count2),
     +                   specT,tau1T,iflag)
            call interp (period(count1),period(count2),tau2(count1),tau2(count2),
     +                   specT,tau2T,iflag)
            call interp (period(count1),period(count2),sigma1(count1),sigma1(count2),
     +                   specT,sigma1T,iflag)
            call interp (period(count1),period(count2),sigma2(count1),sigma2(count2),
     +                   specT,sigma2T,iflag)
            call interp (period(count1),period(count2),sigma2Jap(count1),sigma2Jap(count2),
     +                   specT,sigma2JapT,iflag)
            call interp (period(count1),period(count2),sigma3(count1),sigma3(count2),
     +                   specT,sigma3T,iflag)
            call interp (period(count1),period(count2),gscaleJapIt(count1),gscaleJapIt(count2),
     +                   specT,gscaleJapItT,iflag)
            call interp (period(count1),period(count2),gscaleWen(count1),gscaleWen(count2),
     +                   specT,gscaleWenT,iflag)

            call interp (period(count1),period(count2),phi1a(count1),phi1a(count2),
     +                   specT,phi1aT,iflag)
            call interp (period(count1),period(count2),phi1b(count1),phi1b(count2),
     +                   specT,phi1bT,iflag)
            call interp (period(count1),period(count2),phi1JP(count1),phi1JP(count2),
     +                   specT,phi1JPT,iflag)
            call interp (period(count1),period(count2),phi1aJP(count1),phi1aJP(count2),
     +                   specT,phi1aJPT,iflag)
            call interp (period(count1),period(count2),phi1bJP(count1),phi1bJP(count2),
     +                   specT,phi1bJPT,iflag)
            call interp (period(count1),period(count2),phi5JP(count1),phi5JP(count2),
     +                   specT,phi5JPT,iflag)
            call interp (period(count1),period(count2),phi6JP(count1),phi6JP(count2),
     +                   specT,phi6JPT,iflag)
            call interp (period(count1),period(count2),phi1TW(count1),phi1TW(count2),
     +                   specT,phi1TWT,iflag)

 1011 period1 = specT                                                                                                              

c     Set the fault mechanism term.
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                   -120 < Rake < -60.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C     0,-0.5    Strike-Slip and NMl/Obl        Otherwise
         if (ftype .eq. -1) then
            F_RV = 0.0
            F_NM = 1.0
         elseif (ftype .ge. 0.5) then
            F_RV = 1.0
            F_NM = 0.0
         else
            F_RV = 0.0
            F_NM = 0.0
         endif

C HW factors......
c     For now, convert hwflag to an equivalent srcSiteA      
c      if ( hwflag .eq. 1 ) then
c        srcSiteA = 90.
c      else
c        srcSiteA = 0.
c      endif
C No longer needed since Rx is computed and passed.
C     Compute Rx value given source to site azimuth
c      if (srcsiteA .eq. 90.0) then         
c         Rx = Rrup/sin(abs(delta)*3.14159/180.0) - DTor/tan(abs(delta)*3.14159/180.0)
c      elseif (srcsiteA .gt. 0.0) then
c         Rx = Rbjf*tan(srcSiteA*3.14159/180.0)
c      elseif (srcsiteA .le. 0.0) then
c         Rx = 0.0
c      endif

C     Constant terms
        c2 = 1.06
        c4 = -2.1
        c4a = -0.5
        cRB = 50.0
        c8 = 0.2154
        c8a = 0.0

        pi = atan(1.0)*4.0
        d2r = pi/180.0

        cc = c5T* cosh(c6T * max((M-cHMT),0.0))
        gamma = gamma1T + gamma2T/cosh(max((M-gmT),0.0))
C     Apply Regional scaling factor.
C     Regionflag = 0 Global
C     Regionflag = 1 Japan and Italy
C        Also set sigma2 equal to Japan specific value
C     Regionflag = 2 Wenchuan (note only for M7.9)
        if (regionflag .eq. 1 ) then
           gamma = gamma * gscaleJapItT
           sigma2T = sigma2JapT
        elseif (regionflag .eq. 2) then
           gamma = gamma * gscaleWenT        
        endif

        cosDELTA = cos(abs(DELTA)*d2r)

c Magnitude scaling
        r1 = c1T + c2 * (M-6.0) +
     1       (c2-c3T)/cnT *
     1             alog(1.0 + exp(cnT*(cMT-M)))

c Near-field magnitude and distance scaling
        r2 = c4 * alog(Rrup + cc)

c Distance scaling at large distance
        r3 = (c4a-c4)/2.0 *
     1            alog( Rrup*Rrup+cRB*cRB ) +
     1       Rrup * gamma

c Center Z_TOR on the Z_TOR-M relation in Chiou and Youngs (2013)
        if (F_RV.EQ.1) then
          if (M .le. 5.849) then
              mZ_TOR = 2.704*2.704
          else
              mZ_TOR = max(2.704-1.226*(M-5.849), 0.0)
              mZ_TOR = mZ_TOR * mZ_TOR
          endif
        else
          if (M .le. 4.970) then
              mZ_TOR = 2.673*2.673
          else
              mZ_TOR = max(2.673-1.136*(M-4.970), 0.0)
              mZ_TOR = mZ_TOR * mZ_TOR
          endif
        endif
c        if (Z_TOR .EQ. -999) Z_TOR = mZ_TOR
        deltaZ_TOR = Dtor - mZ_TOR

c Scaling with other source variables (F_RV, F_NM, deltaZ_TOR, and Dip)
        coshM = cosh(2*max(M-4.5,0.0))
        cosDELTA = cos(DELTA*d2r)
        r4 = (c1aT+c1cT/coshM) * F_RV +
     1       (c1bT+c1dT/coshM) * F_NM +
     1       (c7T +c7bT/coshM) * deltaZ_TOR +
     1       (c11T+c11bT/coshM)* cosDELTA**2

C New Dip dependence for NGA West2 Model
c        if (m .lt. 6.0) then
c           r4 = r4 + c11T*min(delta-70.0,0.0)
c        endif
        
c HW effect
        if (HWFlag .eq. 0) then
           hw = 0.0
        else
         hw = c9T * (cosDELTA) * (c9aT+(1-c9aT)
     1        *tanh(Rx/c9bT)) *
     1          (1.0 - sqrt(Rbjf**2+DTor**2)/(Rrup + 1))
        endif

C     Current version of the code sets cDPP=0 (i.e., no directivity)
c Directivity effect
c        cDPP = 0.0
c        fd = c8T * exp(-c8aT * (M-c8bT)**2) *
c     1       max(0.0, 1.0-max(0.0,Rrup-40.0)/30.0) *
c     1       min(max(0.0,M-5.5)/0.8, 1.0) * cDPP

c Predicted median Sa on reference condition (Vs=1130 m/sec)
        psa_ref = r1+r2+r3+r4+hw+fd
       
c Linear soil amplification
c        a = phi1T * min(alog(Vs/1130.0), 0.0)
C     Vertical Linear Amp Function
         a = phi1T / (1 + (vs/phi1aT)**phi1bT)

c Nonlinear soil amplification
        b = phi2T *
     1      (exp(phi3T*(min(Vs,1130.0)-360.0)) - exp(phi3T*(1130.0-360.0)))
        c = phi4T

C Deviation from ln(Vs30) scaling: bedrock depth (Z1) effect.
        deltaZ1 = depthvs10*1000.0 -
c     1  exp(-7.15/4.0 * log((VS**4.0 + 570.94**4.0)/(1360.0**4.0 + 570.94**4.0)))
     1  exp(-7.15/4.0 * alog((VS**4.0 + 571.0**4.0)/(1360.0**4.0 + 571.0**4.0)))

        rkdepth = phi5T * ( 1.0 - exp(-deltaZ1/phi6T ) )

c Sa on soil condition
c        psa = psa_ref + (a + b * alog((exp(psa_ref)+c)/c)) + rkdepth
        psa = psa_ref + a + rkdepth


C Compute the sigma term

c        NL0 = b * exp(psa_ref)/(exp(psa_ref)+c)

        tau = tau1T +
     1            (tau2T-tau1T)/1.5*(min(max(M,5.0),6.5)-5.0)
C     Current code set for Measured Vs30 values (i.e., Vs30class=1)
      if (vs30_class .eq. 0) then
         F_measured = 0.0
         F_Inferred = 1.0
      elseif (vs30_class .eq. 1) then      
         F_measured = 1.0
         F_Inferred = 0.0
      endif

        sigma_NL0 = (sigma1T +
     1              ( (sigma2T-sigma1T)/1.5*(min(max(M,5.0),6.5)-5.0))) *
     1         sqrt(0.7*F_Measured+F_Inferred*sigma3T+1.0) 

        sigma = sqrt((tau)**2.0+sigma_NL0**2.0)

      phi = sigma_NL0

C     Convert ground motion to units of gals.
      lnY = psa + 6.89
      period2 = period1

      return
      end 
  
c ------------------------------------------------------------------            
C *** Gulerce, Kamai, Abrahamson, and Silva (NGA-West2 2013) Vertical ****
C     Reference: 
C     Notes:
C        Applicable Range (see Abstract):  
C           3 <= M <= 8.5
C           Rrup <= 300 km
C        Regional attenuation included based on Regionflag
C             0 = Global
C             1 = Taiwan
C             2 = China
C             3 = Japan
C         Mainshock and Aftershocks included based on MSASFlag
C             0 = Mainshocks
C             1 = Aftershocks
C         Sigma dependent on estimated or measured Vs30m based on 
C             Vs30_Class
C             0 = Estimated Vs30m
C             1 = Measured Vs30m
c ------------------------------------------------------------------            
      subroutine GKAS_NGAWest2_2013_Vert ( mag, dip, fType, fltWidth, rRup, Rjb,  
     1                     vs30, hwflag, lnY, sigma, specT, period2, ztor,
     2                     iflag, vs30_class, z10, Rx, Ry0, regionflag, msasflag, phi, tau )

C     Last Updated: 6/03/14

      real mag, dip, fType, rRup, rjb, Rx, Ry0, vs30, SA1180,
     1      Z10,  ZTOR, fltWidth, lnSa, sigma, lnY
      real Fn, Frv, specT, period2, CRjb
      integer hwflag, iflag, vs30_class, regionflag, msasflag

c     Vs30 class is to distinguish between the sigma if the Vs30 is measured
c     vs the VS30 being estimated from surface geology.
c         Vs30_class = 0 for estimated
c         Vs30_class = 1 for measured 

C     Current version is not programmed for Aftershock cases. 
C       For implementation of Aftershock a new distance metric, CRjb
C       will need to be computed and passed along to this subroutine. 

      CRjb = 999.9 

c     For now, convert ftype to an equivalent rake      
C     fType     Mechanism                      Rake
C     ------------------------------------------------------
C      -1       Normal                   -120 < Rake < -60.0
C     1, 0.5    Reverse and Rev/Obl        30 < Rake < 150.0
C     0,-0.5    Strike-Slip and NMl/Obl        Otherwise
C 
      if ( fType .eq. 1.0 ) then
        Frv = 1.0
        Fn = 0.0
      elseif ( fType .eq. 0.5 ) then
        Frv = 1.0
        Fn = 0.0
      elseif ( fType .eq. -1.0 ) then
        Frv = 0.0
        Fn = 1.0
      elseif ( fType .eq. -0.5 ) then
        Frv = 0.0
        Fn = 1.0
      else
        Frv = 0.0
        Fn = 0.0
      endif

c     Compute SA1180
      vs30_rock = 1180.
      z10_rock = 0.005
      SA_rock = 0.
      
      call GKAS2013_v11_model_Vert ( mag, dip, fltWidth, ZTOR, Frv, Fn, rRup, rjb, rx, Ry0, 
     1                     vs30_rock, SA_rock, Z10_rock, hwflag, vs30_class,
     2                     specT, lnSa, phi, tau, iflag, regionflag, msasflag, CRjb )
      Sa1180 = exp(lnSa)

c     Compute Sa at spectral period for given Vs30

      call GKAS2013_v11_model_Vert ( mag, dip, fltWidth, ZTOR, Frv, Fn, rRup, rjb, rx, Ry0, 
     1                     vs30, SA1180, Z10, hwflag, vs30_class,
     2                     specT, lnSa, phi, tau, iflag, regionflag, msasflag, CRjb )

c     compute Sa (given the PGA rock value)
      sigma = sqrt( phi**2 + tau**2 )

      lnY = lnSa + 6.89

      period2 = specT

      return
      end

c ----------------------------------------------------------------------
      subroutine GKAS2013_v11_model_Vert ( mag, dip, FltWidth, ZTOR, Frv, Fn, rRup, rjb, Rx, Ry0, 
     1                     vs30, Sa1180, Z1, hwflag, vs30_class,
     3                     specT, lnSa, phi, tau, iflag, regionflag, msasflag, CRjb)
 
c      implicit none
      integer MAXPER     
      parameter (MAXPER=24)
      
      real Vlin(MAXPER), b(MAXPER), c4(MAXPER), M1(MAXPER), a1(MAXPER)
      real a2(MAXPER), a3(MAXPER), a6(MAXPER), a8(MAXPER), a10(MAXPER)
      real a11(MAXPER), a12(MAXPER), a13(MAXPER), a14(MAXPER), a15(MAXPER)
      real a17(MAXPER), a43(MAXPER), a44(MAXPER), a45(MAXPER), a46(MAXPER)
      real a25(MAXPER), a28(MAXPER), a29(MAXPER), a31(MAXPER), a36(MAXPER)
      real a37(MAXPER), a38(MAXPER), a39(MAXPER), a40(MAXPER), a41(MAXPER), a42(MAXPER)
      real s1est(MAXPER), s2est(MAXPER), s1msr(MAXPER), s2msr(MAXPER)
      real s3(MAXPER), s4(MAXPER), s5(MAXPER), s6(MAXPER), period(MAXPER)
      real c(MAXPER), a4(MAXPER)
      real a5(MAXPER), a5T, a7
      real VlinT, bT, c4T, M1T, a1T
      real a2T, a3T, a6T, a8T, a10T
      real a11T, a12T, a13T, a14T, a15T
      real a17T, a43T, a44T, a45T, a46T
      real a25T, a28T, a29T, a31T, a36T
      real a37T, a38T, a39T, a40T, a41T, a42T
      real s1estT, s2estT, s1msrT, s2msrT
      real s3T, s4T, s5T, s6T, c4_mag
      real phiA_est, phiA_msr
      real cT, a4T
      
      real M2, M3 
      real lnSa, SA1180, rjb, rRup, Rx, Ry0, dip, mag, vs30
      real HW_taper1, HW_taper2, HW_taper3, HW_taper4, HW_taper5
      real damp_dSA1180, sigAmp, fltWidth, testv1
      real f1, f4, f5, f6, f7, f8, f9, f10, f11, fReg, f12, f13
      real Ry1, ZTOR, Frv, Fn, SpecT
      real phiA, phiB, tauA, tauB, phi, tau
      integer vs30_class, hwflag, iflag, nPer, regionflag, msasflag
      real n, z1, c2, e2, a21, a22, test, zhat
      real R, V1, Vs30Star, hw_a2, h1, h2, h3, R1, R2, CRjb
      integer count1, count2
      real y1, y2, x1, x2, y1z, y2z, x1z, x2z

      Data Period  /  0, -1, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 
     1                0.75, 1, 1.5, 2, 3, 4, 5, 6, 7.5, 10  / 

      
      Data VLIN  /  660, 330, 660, 680, 770, 800, 800, 800, 740, 590, 495, 430, 360, 340, 330, 
     1         330, 330, 330, 330, 330, 330, 330, 330, 330  / 
      Data b  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      
      Data c  /  2.4, 2400, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 1.8, 1.8, 1.8, 1.8,
     1         1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8  / 
      Data c4  / 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8  / 

      Data a1  /  1.8892, 5.0635, 1.8892, 2.1323, 2.4756, 2.9551, 2.9285, 2.7345, 2.4477, 2.221, 2.0704, 
     1        1.9744, 1.8231, 1.7434, 1.6445, 1.5417, 1.1339, 0.9542, 0.6368, 0.3567, 0.1143, -0.1242, 
     1       -0.5314, -1.2361  / 
      Data a2  /  -1.322, -0.85, -1.322, -1.37, -1.418, -1.43, -1.355, -1.3, -1.24, -1.205, -1.175, 
     1       -1.16, -1.13, -1.13, -1.13, -1.13, -1.085, -1.053, -1.008, -0.977, -0.952, -0.932, 
     1       -0.9075, -0.875  / 
      Data a3  /  0.385, 0.3524, 0.385, 0.385, 0.385, 0.385, 0.385, 0.385, 0.35, 0.326, 0.307, 
     1        0.291, 0.267, 0.248, 0.213, 0.188, 0.154, 0.129, 0.095, 0.07, 0.07, 0.07, 0.07, 0.07  / 
      Data a4  /  -0.106, -0.27, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106,
     1       -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106, -0.106,
     1       -0.106, -0.106, -0.106 / 
      Data a5  /  -0.801, -0.4414, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, 
     1       -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, -0.801, 
     1       -0.801, -0.801, -0.801, -0.801, -0.801 / 
      Data a6  /  1.75, 2.6, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75, 1.937, 2.069, 2.172, 2.256, 2.388, 
     1        2.491, 2.678, 2.81, 2.81, 2.81, 2.81, 2.81, 2.81, 2.81, 2.81, 2.81  / 
      Data a8  /  0, -0.11, 0, 0, 0, 0, 0, 0, -0.0127, -0.0297, -0.0452, -0.0556, -0.0811, -0.1001,
     1       -0.1451, -0.1795, -0.236, -0.2897, -0.3629, -0.41, -0.44, -0.455, -0.4618, -0.4657  / 
      Data M1  /  6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 
     1        6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75, 6.75  / 
      Data a10  /  -0.1627, -0.3, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627,
     1       -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, 
     1       -0.1627, -0.1627, -0.1627, -0.1627, -0.1627, -0.1627  / 
      Data a11  /  -0.22, 0, -0.22, -0.22, -0.22, -0.22, -0.22, -0.22, -0.1672, -0.1297, -0.1006,
     1       -0.0769, -0.0394, -0.0103, 0.0425, 0.08, 0.1328, 0.1703, 0.2231, 0.2606, 0.2897, 
     1        0.3134, 0.3422, 0.38  / 
      Data a12  /  -0.1, 0, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1,
     1       -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1  / 
      Data a13  /  0.67, 0.35, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.62, 0.579, 0.515,
     1        0.465, 0.374, 0.31, 0.219, 0.155, 0.064, 0, 0, 0, 0, 0  / 
      Data a14  / 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a15  /  1.05, 0.85, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 1.05, 0.9734,
     1        0.8525, 0.7588, 0.5884, 0.4675, 0.2971, 0.1763, 0.0059, -0.115, -0.2088, 
     1       -0.2854, -0.37815, -0.5  / 
      Data a17  /  -0.0005, 0, -0.0005, -0.0005, -0.0009, -0.0022, -0.0026, -0.0021, -0.0012,
     1       -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002,
     1       -0.0002, -0.0002, -0.0002, -0.0002, -0.0002, -0.0002  / 
      Data a25  /  -0.0022, 0, -0.0022, -0.0023, -0.0022, -0.003, -0.0055, -0.0063, -0.0056, 
     1       -0.0052, -0.0041, -0.0033, -0.0019, -0.0011, -0.0008, -0.0008, -0.0008, -0.0008,
     1       -0.0008, -0.0008, -0.0008, -0.0008, -0.0008, -0.0008  / 
      Data a28  /  -0.0007, 0, -0.0007, -0.0008, -0.0007, -0.0004, -0.0003, -0.0007, -0.0006,
     1       -0.0004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a29  /  -0.0036, 0, -0.0036, -0.0037, -0.0036, -0.004, -0.0044, -0.0049, -0.0051, 
     1       -0.0053, -0.0049, -0.0044, -0.0037, -0.0031, -0.0022, -0.0016, -0.0012, -0.0012,
     1       -0.0012, -0.0012, -0.0012, -0.0012, -0.0012, -0.0012  / 
      Data a31  /  -0.033, 0, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033,
     1       -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, -0.033, 
     1       -0.033, -0.033, -0.033, -0.033  / 
      Data a36  /  1.32, 0, 1.32, 1.32, 1.32, 1.32, 1.32, 1.32, 1.0737, 0.8989, 0.7633, 
     1        0.6526, 0.4778, 0.3422, 0.0959, -0.0789, -0.3252, -0.5, -0.5, -0.5, -0.5, 
     1       -0.5, -0.5, -0.5  / 
      Data a37  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a38  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a39  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a40  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a41  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a42  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a43  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a44  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a45  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
      Data a46  / 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  / 
C     Set Measure S1 and S2 values equal to estimated values.
      Data s1est  /  0.72, 0.5893, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.697848887, 0.680667149,
     1       0.666628647, 0.644477534, 0.627295796, 0.596075556, 0.573924444, 0.542704204, 0.520553091, 
     1       0.489332851, 0.467181738, 0.45, 0.435961498, 0.419, 0.397  / 
      Data s2est  /  0.57, 0.466, 0.57, 0.5910721, 0.603398488, 0.6189279, 0.631254288, 0.64, 0.6395,
     1       0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395,
     1       0.6395, 0.6395, 0.6395, 0.6395  / 
      Data s1msr  /  0.72, 0.5893, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.697848887, 0.680667149,
     1       0.666628647, 0.644477534, 0.627295796, 0.596075556, 0.573924444, 0.542704204, 0.520553091,
     1       0.489332851, 0.467181738, 0.45, 0.435961498, 0.419, 0.397  / 
      Data s2msr  /  0.57, 0.466, 0.57, 0.5910721, 0.603398488, 0.6189279, 0.631254288, 0.64, 0.6395,
     1       0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 0.6395, 
     1       0.6395, 0.6395, 0.6395, 0.6395  / 
      Data s3  /  0.49, 0.4949, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 
     1       0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49, 0.49  / 
      Data s4  /  0.315, 0.2402, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315,
     1       0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315, 0.315  / 
 

      
C Find the requested spectral period and corresponding coefficients
      nPer = 24

C First check for the PGA, PGV, PGD cases 
      if (specT .eq. 0.0) then
         period1 = period(1)
         a1T = a1(1)
         a2T = a2(1)
         a3T = a3(1)
         a4T = a4(1)
         a5T = a5(1)
         a6T = a6(1)
         a8T = a8(1)
         M1T = M1(1)
         cT = c(1)
         a10T = a10(1)
         a11T = a11(1)
         a12T = a12(1)
         a13T = a13(1)
         a14T = a14(1)
         a15T = a15(1)
         a17T = a17(1)
         a43T = a43(1)
         a44T = a44(1)
         a45T = a45(1)
         a46T = a46(1)
         a25T = a25(1)
         a28T = a28(1)
         a29T = a29(1)
         a31T = a31(1)
         a36T = a36(1)
         a37T = a37(1)
         a38T = a38(1)
         a39T = a39(1)
         a40T = a40(1)
         a41T = a41(1)
         a42T = a42(1)
         VlinT = Vlin(1)
         bT = b(1)
         c4T = c4(1)
         s1estT = s1est(1)
         s2estT = s2est(1)
         s1msrT = s1msr(1)
         s2msrT = s2msr(1)
         s3T = s3(1)
         s4T = s4(1)
         s5T = s5(1)
         s6T = s6(1)
         goto 1011
      elseif (specT .eq. -1.0) then
         period1 = period(2)
         a1T = a1(2)
         a2T = a2(2)
         a3T = a3(2)
         a4T = a4(2)
         a5T = a5(2)
         a6T = a6(2)
         a8T = a8(2)
         M1T = M1(2)
         cT = c(2)
         a10T = a10(2)
         a11T = a11(2)
         a12T = a12(2)
         a13T = a13(2)
         a14T = a14(2)
         a15T = a15(2)
         a17T = a17(2)
         a43T = a43(2)
         a44T = a44(2)
         a45T = a45(2)
         a46T = a46(2)
         a25T = a25(2)
         a28T = a28(2)
         a29T = a29(2)
         a31T = a31(2)
         a36T = a36(2)
         a37T = a37(2)
         a38T = a38(2)
         a39T = a39(2)
         a40T = a40(2)
         a41T = a41(2)
         a42T = a42(2)
         VlinT = Vlin(2)
         bT = b(2)
         c4T = c4(2)
         s1estT = s1est(2)
         s2estT = s2est(2)
         s1msrT = s1msr(2)
         s2msrT = s2msr(2)
         s3T = s3(2)
         s4T = s4(2)
         s5T = s5(2)
         s6T = s6(2)
         goto 1011
      endif
C   For other periods, loop over the spectral period range of the attenuation relationship.
      do i=3,nper-1
         if (specT .ge. period(i) .and. specT .le. period(i+1) ) then
            count1 = i
            count2 = i+1
            goto 1020 
         endif
      enddo

C Selected spectral period is outside range defined by attenuaton model.
      write (*,*) 
      write (*,*) 'Gulerce, Kamai, Abrahamson, and Silva (NGA West2-2013) Vertical'
      write (*,*) 'attenuation model is not defined for a '
      write (*,*) ' spectral period of: ' 
      write (*,'(a10,f10.5)') ' Period = ',specT
      write (*,*) 'This spectral period is outside the defined'
      write (*,*) 'period range in the code or beyond the range'
      write (*,*) 'of spectral periods for interpolation.'
      write (*,*) 'Please check the input file.'
      write (*,*) 
      stop 99

C Interpolate the coefficients for the requested spectral period.
 1020       call interp (period(count1),period(count2),a1(count1),a1(count2),
     +                   specT,a1T,iflag)
            call interp (period(count1),period(count2),a2(count1),a2(count2),
     +                   specT,a2T,iflag)
            call interp (period(count1),period(count2),a3(count1),a3(count2),
     +                   specT,a3T,iflag)
            call interp (period(count1),period(count2),a4(count1),a4(count2),
     +                   specT,a4T,iflag)
            call interp (period(count1),period(count2),a5(count1),a5(count2),
     +                   specT,a5T,iflag)
            call interp (period(count1),period(count2),a6(count1),a6(count2),
     +                   specT,a6T,iflag)
            call interp (period(count1),period(count2),a8(count1),a8(count2),
     +                   specT,a8T,iflag)
            call interp (period(count1),period(count2),M1(count1),M1(count2),
     +                   specT,M1T,iflag)
            call interp (period(count1),period(count2),c(count1),c(count2),
     +                   specT,cT,iflag)
            call interp (period(count1),period(count2),a10(count1),a10(count2),
     +                   specT,a10T,iflag)
            call interp (period(count1),period(count2),a11(count1),a11(count2),
     +                   specT,a11T,iflag)
            call interp (period(count1),period(count2),a12(count1),a12(count2),
     +                   specT,a12T,iflag)
            call interp (period(count1),period(count2),a13(count1),a13(count2),
     +                   specT,a13T,iflag)
            call interp (period(count1),period(count2),a14(count1),a14(count2),
     +                   specT,a14T,iflag)
            call interp (period(count1),period(count2),a15(count1),a15(count2),
     +                   specT,a15T,iflag)
            call interp (period(count1),period(count2),a17(count1),a17(count2),
     +                   specT,a17T,iflag)
            call interp (period(count1),period(count2),a43(count1),a43(count2),
     +                   specT,a43T,iflag)
            call interp (period(count1),period(count2),a44(count1),a44(count2),
     +                   specT,a44T,iflag)
            call interp (period(count1),period(count2),a45(count1),a45(count2),
     +                   specT,a45T,iflag)
            call interp (period(count1),period(count2),a46(count1),a46(count2),
     +                   specT,a46T,iflag)
            call interp (period(count1),period(count2),a25(count1),a25(count2),
     +                   specT,a25T,iflag)
            call interp (period(count1),period(count2),a28(count1),a28(count2),
     +                   specT,a28T,iflag)
            call interp (period(count1),period(count2),a29(count1),a29(count2),
     +                   specT,a29T,iflag)
            call interp (period(count1),period(count2),a31(count1),a31(count2),
     +                   specT,a31T,iflag)
            call interp (period(count1),period(count2),a36(count1),a36(count2),
     +                   specT,a36T,iflag)
            call interp (period(count1),period(count2),a37(count1),a37(count2),
     +                   specT,a37T,iflag)
            call interp (period(count1),period(count2),a38(count1),a38(count2),
     +                   specT,a38T,iflag)
            call interp (period(count1),period(count2),a39(count1),a39(count2),
     +                   specT,a39T,iflag)
            call interp (period(count1),period(count2),a40(count1),a40(count2),
     +                   specT,a40T,iflag)
            call interp (period(count1),period(count2),a41(count1),a41(count2),
     +                   specT,a41T,iflag)
            call interp (period(count1),period(count2),a42(count1),a42(count2),
     +                   specT,a42T,iflag)
            call interp (period(count1),period(count2),Vlin(count1),Vlin(count2),
     +                   specT,VlinT,iflag)
            call interp (period(count1),period(count2),b(count1),b(count2),
     +                   specT,bT,iflag)
            call interp (period(count1),period(count2),c4(count1),c4(count2),
     +                   specT,c4T,iflag)
            call interp (period(count1),period(count2),s1est(count1),s1est(count2),
     +                   specT,s1estT,iflag)
            call interp (period(count1),period(count2),s2est(count1),s2est(count2),
     +                   specT,s2estT,iflag)
            call interp (period(count1),period(count2),s1msr(count1),s1msr(count2),
     +                   specT,s1msrT,iflag)
            call interp (period(count1),period(count2),s2msr(count1),s2msr(count2),
     +                   specT,s2msrT,iflag)
            call interp (period(count1),period(count2),s3(count1),s3(count2),
     +                   specT,s3T,iflag)
            call interp (period(count1),period(count2),s4(count1),s4(count2),
     +                   specT,s4T,iflag)
            call interp (period(count1),period(count2),s5(count1),s5(count2),
     +                   specT,s5T,iflag)
            call interp (period(count1),period(count2),s6(count1),s6(count2),
     +                   specT,s6T,iflag)

 1011 period1 = specT                                                                                                              

C     Constant values
      n = 1.5
      M2 = 5.0
      a7 = 0.0

C     Set C term
c      if (period1 .eq. -1.0) then
c         c = 2400.0
c      else
c         c = 2.4
c      endif

C     Magnitude dependent taper for C4 (eq. 4.4)
c      if (mag .ge. 5.0) then
c         c4_mag = c4T
c      elseif (mag .ge. 4.0) then
c         c4_mag = c4T - (c4T-1.0) * (5.0-mag)
c      else
c         c4_mag = 1.0
c      endif 
C     Set C4 for vertical model
      c4_mag = c4T     
c     Set distance (eq 4.3)
      R = sqrt(rRup**2 + c4_mag**2)
       	  
C     Base Model (eq 4.2)
      if ( mag .lt. M2 ) then
        f1 = a1T + a6T*(Mag-M2) + a7*(Mag-M2)**2 + a4T*(M2-M1T) + a8T*(8.5-M2)**2 +
     1                (a2T + a3T*(M2-M1T)) * alog(R) + a17T*R
      elseif ( mag .lt. M1T ) then
        f1 = a1T + a4T*(Mag-M1T) + a8T*(8.5-Mag)**2 + (a2T + a3T*(Mag-M1T)) * alog(R) + a17T*Rrup
      else
        f1 = a1T + a5T*(Mag-M1T) + a8T*(8.5-Mag)**2 + (a2T + a3T*(Mag-M1T)) * alog(R) + a17T*Rrup
      endif

c     style of faulting (eq 4.5 and 4.6) 
      if ( mag .lt. 4. ) then
        f7 = 0
        f8 = 0
      elseif ( mag .le. 5. ) then
        f7 = Frv * a11T * (mag-4.)
        f8 = Fn * a12T * (mag-4.)
      else 
        f7 = Frv * a11T
        f8 = Fn * a12T
      endif

c     ZTOR (eq 14) - vertical is set at 12 km
      if (ZTOR .le. 12.) then 
        f6 = a15T * ZTOR/12.0
      else
        f6 = a15T
      endif    

c     Set VS30_star (eq 4.8 and 4.9)
      if ( specT .ge. 3.0 ) then
        V1 = 800.
      elseif ( specT .gt. 0.5 ) then
        V1 = exp( -0.35 * alog(specT/0.5)  + alog(1500.) )
      else
        V1=1500.
      endif
      if ( vs30 .lt. v1 ) then
         vs30Star = vs30
      else
	vs30Star = v1
      endif		

c     Compute site amplification (Eq. 4.7)  
      if (vs30 .lt. vLinT) then
        f5 = a10T*alog(vs30Star/vLinT) - bT*alog(cT+Sa1180) 
     1              + bT*alog(Sa1180+cT*((vs30Star/vLinT)**(n)) )
      else
     	f5 = (a10T + bT*n) * alog(vs30Star/vLinT)
      endif

c     Set Regional z1 reference (eq 4.18)
      if (regionflag .ne. 3) then
         z1_ref = exp ( -7.67/4. * alog( (Vs30**4 + 610.**4)/(1360.**4+610.**4) ) ) / 1000.
      else
         z1_ref = exp ( -5.23/2. * alog( (Vs30**4 + 412.**2)/(1360.**2+412.**2) ) ) / 1000.
      endif 
      
C     Soil Depth Model (eq 4.17)
C     Updated 8/1/13
      if ( vs30 .le. 150.0 ) then
         y1z = a43T
         y2z = a43T 
         x1z = 50.0
         x2z = 150.0
      elseif ( vs30 .le. 250.0 ) then
         y1z = a43T
         y2z = a44T 
         x1z = 150.0
         x2z = 250.0
      elseif ( vs30 .le. 400.0 ) then
         y1z = a44T
         y2z = a45T 
         x1z = 250.0
         x2z = 400.0
      elseif ( vs30 .le. 700.0 ) then
         y1z = a45T
         y2z = a46T 
         x1z = 400.0
         x2z = 700.0
      else
         y1z = a46T
         y2z = a46T 
         x1z = 700.0
         x2z = 1000.0
      endif
C     Calculation f10 term and set it equal to zero for Vs=1180m/s (i.e., reference condition)
      if (vs30 .eq. 1180.0) then
          f10 = 0.0
      else
         f10 = ( y1z + (Vs30-x1z)*(y2z-y1z)/(x2z-x1z))*alog( (z1 + 0.01) / (z1_ref+0.01) )
      endif

c     Compute HW taper1 (eq 4.11) 
      if ( dip .lt. 30. ) then
        HW_taper1 = 60./ 45.
      else
        HW_taper1 = (90.-dip)/45.
      endif

c     Compute HW taper2 (eq. 4.12)
      hw_a2 = 0.2
      if( mag .gt. 6.5 ) then
        HW_taper2 = 1. + hw_a2 * (mag-6.5) 
      elseif ( mag .gt. 5.5 ) then
        HW_taper2 = 1. + HW_a2 * (mag-6.5) - (1.0 - HW_a2)*(mag-6.5)**2
      else
        HW_taper2 = 0.
      endif

c     Compute HW taper 3 (eq. 4.13)
C	  April 11, correction by ronnie for HW_taper3 when Rx.gt.R2
      h1 = 0.25
      h2 = 1.5
      h3 = -0.75
      R1 = fltWidth * cos(dip*3.1415926/180.)
      R2 = 3.*R1
      if ( Rx .le. R1 ) then
        HW_taper3 = h1 + h2*(Rx/R1) + h3*(Rx/R1)**2
      elseif ( Rx . lt. R2 ) then
        HW_taper3 = 1. - (Rx-R1)/(R2-R1)
      else
        HW_taper3 = 0.
      endif 

c     Compute HW taper 4 (eq 4.14)
      if ( ZTOR .lt. 10. ) then
        HW_taper4 = 1. - (ZTOR**2) / 100.
      else
        HW_taper4 = 0.
      endif
      
c     Compute HW taper 5 (eq. 13)  **** Ry0 version, not used here ***     
c      Ry1 = Rx * tan(20.*3.1415926/180.)
c      if ( Ry0 .lt. Ry1 ) then
c        HW_taper5 = 1.
c      elseif ( Ry0-Ry1 .lt. 5. ) then
c        HW_taper5 = 1. - (Ry0-Ry1) / 5.
c      else
c        HW_taper5 = 0.
c      endif

c     Compute HW taper 5 (eq. 4.15b)  **** No Ry0 version ***     
      if (Rjb .eq. 0. ) then
        HW_taper5 = 1. 
      elseif ( Rjb .lt. 30. ) then
        HW_taper5 = 1 - Rjb/30.
      else
        HW_taper5 = 0.
      endif

c     Hanging wall Model (eq 4.10)
      if ( HWFlag .eq. 1 ) then
        f4 = a13T * HW_taper1 * HW_taper2 * HW_taper3 * HW_taper4 * HW_taper5
      else
        f4 = 0.
      endif

C     Add aftershock factor (eq 4.21)
      if (msasflag .eq. 1) then
         if (CRjb .gt. 15.0) then
             f11 = 0.0
         elseif (CRjb .le. 5.0) then
             f11 = a14T
         else
             f11 = a14T * ( 1.0 - (CRjb - 5.0) /10.0) 
         endif
      elseif (msasflag .eq. 0) then
         f11 = 0.0
      endif 

C     Now apply the regional attenuation differences (eq 4.22)
C     Global No Change
      if (regionflag .eq. 0) then
         freg = 0.0
C     Taiwan
      elseif (regionflag .eq. 1) then
         f12 = a31T * alog(Vs30star/VlinT) 
         freg = f12 + a25T*Rrup 
C     China
      elseif (regionflag .eq. 2) then
         freg = a28T*Rrup 
C     Japan
      elseif (regionflag .eq. 3) then
         if (vs30 .lt. 150.0) then
             y1 = a36T
             y2 = a36T
             x1 = 50.0
             x2 = 150.0
         elseif (vs30 .lt. 250.0) then
             y1 = a36T
             y2 = a37T
             x1 = 150.0
             x2 = 250.0
         elseif (vs30 .lt. 350.0) then
             y1 = a37T
             y2 = a38T
             x1 = 250.0
             x2 = 350.0
         elseif (vs30 .lt. 450.0) then
             y1 = a38T
             y2 = a39T
             x1 = 350.0
             x2 = 450.0
         elseif (vs30 .lt. 600.0) then
             y1 = a39T
             y2 = a40T
             x1 = 450.0
             x2 = 600.0
         elseif (vs30 .lt. 850.0) then
             y1 = a40T
             y2 = a41T
             x1 = 600.0
             x2 = 850.0
         elseif (vs30 .lt. 1150.0) then
             y1 = a41T
             y2 = a42T
             x1 = 850.0
             x2 = 1150.0
         else
             y1 = a42T
             y2 = a42T
             x1 = 1150.0
             x2 = 3000.0
         endif
         f13 = y1 + (y2-y1)/(x2-x1) * (vs30-x1)
         freg = f13 + a29T*Rrup 
      endif

C     Set the Sigma Values
      if (regionflag .ne. 3)  then
c     Compute within-event term, phiA, at the surface for linear site response (eq 7.1)
        if (mag .lt. 4.0) then
           phiA_est = s1estT
        elseif (mag .le. 6.0) then
           phiA_est = s1estT + ((s2estT-s1estT)/2.0)*(mag-4.0)
        else
           phiA_est = s2estT
        endif

c     Compute within-event term, phiA, for known Vs30
        if (mag .lt. 4.0) then
           phiA_msr = s1msrT
        elseif (mag .le. 6.0) then
           phiA_msr = s1msrT + ((s2msrT-s1msrT)/2.0)*(mag-4.0)
        else
           phiA_msr = s2msrT
        endif

C     choose phiA by Vs30 class
        if (vs30_class .eq. 0 ) then
	     phiA = phiA_est
        elseif (vs30_class .eq. 1) then
	     phiA = phiA_msr
        else
	     stop 99
        endif

C     Set Sigma values for Japan Region
      else

C calculate phi_A for Japan (eq. 7.3)
        if (Rrup .lt. 30) then
           phiA = s5T        
        elseif (Rrup .le. 80) then
           phiA = s5T + (s6T-s5T)/50*(Rrup-30)
        else
           phiA = s6T
        endif
      endif
	  
c     Compute between-event term, tau (eq. 7.2)
      if (mag .lt. 5.0) then
         tauA = s3T
      elseif (mag .le. 7.0) then
         tauA = s3T + ((s4T-s3T)/2.0)*(mag-5.0)
      else
         tauA = s4T
      endif
      tauB = tauA

c     Compute phiB, within-event term with site amp variablity removed (eq. 7.7)
      sigAmp = 0.4
      phiB = sqrt( phiA**2 - sigAmp**2)
      
c     Compute parital derivative of alog(soil amp) w.r.t. alog(Sa1180) (eq. 7.10)
      if ( vs30 .ge. vLinT) then
        dAmp_dSa1180 = 0.
      else
        dAmp_dSa1180 = bT*Sa1180 * ( -1. / (Sa1180+cT) 
     1              + 1./ (Sa1180 + cT*(vs30/vLinT)**(n)) )
      endif

C     Compute phi, with non-linear effects (eq. 7.8)
      phi = sqrt( phiB**2 * (1. + dAmp_dSa1180)**2 + sigAmp**2 )

C     Compute tau, with non-linear effects (eq. 7.9)
      tau = tauB * (1. + dAmp_dSa1180)
      
c     Compute median ground motion (eq. 1)
      lnSa = f1 + f4 + f5 + f6 + f7 + f8 + f9 + f10 + f11 + freg 

      return
      end
 
 